%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: CMP-McTwo.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: admin
%%CreationDate: 2019/6/5, 1:32:56
%%BoundingBox: 0 0 787 254
%%HiResBoundingBox: 0 0 786.2784 253.9207
%%CropBox: 0 0 786.2784 253.9207
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 842 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-05-26T19:54:50+08:00"
   xmp:CreatorTool="matplotlib 2.0.0, http://matplotlib.org"
   xmp:ModifyDate="2018-05-26T19:59:31+08:00"
   xmp:MetadataDate="2018-05-26T19:59:31+08:00"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:55cb9ab5-ae2c-470d-b8b4-8018af2818e7"
   xmpMM:InstanceID="uuid:30b0ab82-73dc-40c0-a2c9-513e27770764"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -253.921 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 253.921 li
786.278 253.921 li
786.278 0 li
cp
clp
gsave
-.922508 254.235 mo
787.077 254.235 li
787.077 -.765048 li
-.922508 -.765048 li
-.922508 254.235 li
clp
-70.9226 265.235 mo
865.077 265.235 li
865.077 -22.7649 li
-70.9226 -22.7649 li
-70.9226 265.235 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
46.0774 233.555 mo
771.477 233.555 li
771.477 11.7951 li
46.0774 11.7951 li
46.0774 233.555 li
f
66.8031 233.555 mo
66.8031 237.055 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
66.8031 233.555 mo
66.8031 237.055 li
@
52.4215 241.669 mo
52.4215 247.339 li
53.6115 247.339 li
54.6115 247.339 55.3515 247.119 55.8215 246.659 cv
56.2815 246.199 56.5215 245.479 56.5215 244.499 cv
56.5215 243.519 56.2815 242.809 55.8215 242.349 cv
55.3515 241.899 54.6115 241.669 53.6115 241.669 cv
52.4215 241.669 li
51.4315 240.859 mo
53.4615 240.859 li
54.8715 240.859 55.9115 241.159 56.5715 241.739 cv
57.2316 242.329 57.5616 243.249 57.5616 244.499 cv
57.5616 245.759 57.2215 246.679 56.5615 247.269 cv
55.9015 247.859 54.8615 248.149 53.4615 248.149 cv
51.4315 248.149 li
51.4315 240.859 li
f
59.1316 240.859 mo
60.1216 240.859 li
60.1216 247.319 li
63.6716 247.319 li
63.6716 248.149 li
59.1316 248.149 li
59.1316 240.859 li
f
65.6917 244.669 mo
65.6917 247.339 li
67.2717 247.339 li
67.8017 247.339 68.1917 247.229 68.4516 247.009 cv
68.7016 246.789 68.8316 246.459 68.8316 245.999 cv
68.8316 245.549 68.7016 245.219 68.4516 244.999 cv
68.1917 244.779 67.8017 244.669 67.2717 244.669 cv
65.6917 244.669 li
65.6917 241.669 mo
65.6917 243.869 li
67.1516 243.869 li
67.6317 243.869 67.9816 243.779 68.2216 243.599 cv
68.4617 243.419 68.5816 243.149 68.5816 242.769 cv
68.5816 242.409 68.4617 242.129 68.2216 241.949 cv
67.9816 241.769 67.6317 241.669 67.1516 241.669 cv
65.6917 241.669 li
64.7016 240.859 mo
67.2216 240.859 li
67.9716 240.859 68.5517 241.019 68.9617 241.329 cv
69.3616 241.649 69.5717 242.089 69.5717 242.659 cv
69.5717 243.109 69.4617 243.469 69.2516 243.729 cv
69.0417 243.989 68.7417 244.159 68.3416 244.219 cv
68.8217 244.329 69.2016 244.549 69.4716 244.879 cv
69.7316 245.209 69.8716 245.619 69.8716 246.109 cv
69.8716 246.769 69.6416 247.269 69.2016 247.619 cv
68.7616 247.979 68.1317 248.149 67.3217 248.149 cv
64.7016 248.149 li
64.7016 240.859 li
f
77.0217 241.419 mo
77.0217 242.459 li
76.6817 242.159 76.3317 241.929 75.9517 241.769 cv
75.5717 241.619 75.1817 241.539 74.7617 241.539 cv
73.9217 241.539 73.2817 241.799 72.8417 242.309 cv
72.4017 242.819 72.1817 243.549 72.1817 244.509 cv
72.1817 245.469 72.4017 246.209 72.8417 246.719 cv
73.2817 247.229 73.9217 247.479 74.7617 247.479 cv
75.1817 247.479 75.5717 247.409 75.9517 247.249 cv
76.3317 247.099 76.6817 246.869 77.0217 246.559 cv
77.0217 247.589 li
76.6717 247.829 76.3017 247.999 75.9217 248.109 cv
75.5417 248.219 75.1317 248.279 74.7017 248.279 cv
73.6017 248.279 72.7317 247.949 72.0917 247.279 cv
71.4517 246.609 71.1417 245.689 71.1417 244.509 cv
71.1417 243.339 71.4517 242.419 72.0917 241.739 cv
72.7317 241.069 73.6017 240.729 74.7017 240.729 cv
75.1417 240.729 75.5517 240.789 75.9317 240.899 cv
76.3117 241.019 76.6817 241.189 77.0217 241.419 cv
f
78.5417 240.859 mo
79.5317 240.859 li
79.5317 247.319 li
83.0817 247.319 li
83.0817 248.149 li
78.5417 248.149 li
78.5417 240.859 li
f
108.255 233.555 mo
108.255 237.055 li
f
108.255 233.555 mo
108.255 237.055 li
@
99.4823 241.669 mo
99.4823 244.409 li
100.722 244.409 li
101.182 244.409 101.532 244.299 101.782 244.059 cv
102.032 243.819 102.162 243.479 102.162 243.039 cv
102.162 242.599 102.032 242.269 101.782 242.029 cv
101.532 241.789 101.182 241.669 100.722 241.669 cv
99.4823 241.669 li
98.4923 240.859 mo
100.722 240.859 li
101.532 240.859 102.152 241.049 102.572 241.419 cv
102.992 241.789 103.202 242.329 103.202 243.039 cv
103.202 243.759 102.992 244.309 102.572 244.669 cv
102.152 245.039 101.532 245.219 100.722 245.219 cv
99.4823 245.219 li
99.4823 248.149 li
98.4923 248.149 li
98.4923 240.859 li
f
107.652 243.519 mo
107.552 243.459 107.442 243.419 107.322 243.389 cv
107.202 243.369 107.072 243.349 106.932 243.349 cv
106.422 243.349 106.032 243.519 105.762 243.849 cv
105.482 244.179 105.352 244.649 105.352 245.269 cv
105.352 248.149 li
104.452 248.149 li
104.452 242.679 li
105.352 242.679 li
105.352 243.529 li
105.532 243.199 105.782 242.949 106.082 242.789 cv
106.382 242.629 106.752 242.549 107.192 242.549 cv
107.402 242.559 li
107.472 242.569 107.552 242.579 107.652 242.599 cv
107.652 243.519 li
f
110.712 243.309 mo
110.232 243.309 109.852 243.499 109.572 243.879 cv
109.292 244.259 109.152 244.769 109.152 245.419 cv
109.152 246.079 109.282 246.589 109.562 246.969 cv
109.842 247.349 110.222 247.529 110.712 247.529 cv
111.192 247.529 111.572 247.349 111.852 246.969 cv
112.132 246.589 112.272 246.079 112.272 245.419 cv
112.272 244.779 112.132 244.259 111.852 243.879 cv
111.572 243.499 111.192 243.309 110.712 243.309 cv
110.712 242.549 mo
111.492 242.549 112.102 242.809 112.552 243.309 cv
112.992 243.819 113.222 244.519 113.222 245.419 cv
113.222 246.319 112.992 247.019 112.552 247.519 cv
112.102 248.029 111.492 248.279 110.712 248.279 cv
109.922 248.279 109.302 248.029 108.862 247.519 cv
108.422 247.019 108.202 246.319 108.202 245.419 cv
108.202 244.519 108.422 243.819 108.862 243.309 cv
109.302 242.809 109.922 242.549 110.712 242.549 cv
f
118.202 242.839 mo
118.202 243.689 li
117.942 243.569 117.682 243.469 117.412 243.399 cv
117.132 243.339 116.852 243.299 116.562 243.299 cv
116.112 243.299 115.772 243.369 115.552 243.509 cv
115.332 243.649 115.222 243.849 115.222 244.119 cv
115.222 244.329 115.302 244.489 115.462 244.609 cv
115.622 244.729 115.942 244.849 116.422 244.949 cv
116.732 245.019 li
117.372 245.159 117.822 245.359 118.092 245.599 cv
118.352 245.849 118.492 246.199 118.492 246.639 cv
118.492 247.149 118.292 247.549 117.892 247.839 cv
117.492 248.139 116.932 248.279 116.232 248.279 cv
115.932 248.279 115.632 248.249 115.312 248.199 cv
114.992 248.149 114.662 248.069 114.312 247.949 cv
114.312 247.019 li
114.642 247.199 114.972 247.329 115.292 247.409 cv
115.612 247.499 115.932 247.539 116.252 247.539 cv
116.672 247.539 117.002 247.469 117.232 247.329 cv
117.452 247.189 117.572 246.979 117.572 246.709 cv
117.572 246.469 117.482 246.279 117.322 246.149 cv
117.162 246.019 116.802 245.889 116.242 245.769 cv
115.932 245.699 li
115.372 245.579 114.962 245.399 114.722 245.159 cv
114.472 244.919 114.352 244.589 114.352 244.159 cv
114.352 243.649 114.532 243.249 114.892 242.969 cv
115.252 242.689 115.772 242.549 116.452 242.549 cv
116.782 242.549 117.092 242.579 117.392 242.629 cv
117.682 242.679 117.952 242.749 118.202 242.839 cv
f
149.706 233.555 mo
149.706 237.055 li
f
149.706 233.555 mo
149.706 237.055 li
@
141.966 241.419 mo
141.966 242.459 li
141.626 242.159 141.276 241.929 140.896 241.769 cv
140.516 241.619 140.126 241.539 139.706 241.539 cv
138.866 241.539 138.226 241.799 137.786 242.309 cv
137.346 242.819 137.126 243.549 137.126 244.509 cv
137.126 245.469 137.346 246.209 137.786 246.719 cv
138.226 247.229 138.866 247.479 139.706 247.479 cv
140.126 247.479 140.516 247.409 140.896 247.249 cv
141.276 247.099 141.626 246.869 141.966 246.559 cv
141.966 247.589 li
141.616 247.829 141.246 247.999 140.866 248.109 cv
140.486 248.219 140.076 248.279 139.646 248.279 cv
138.546 248.279 137.676 247.949 137.036 247.279 cv
136.396 246.609 136.086 245.689 136.086 244.509 cv
136.086 243.339 136.396 242.419 137.036 241.739 cv
137.676 241.069 138.546 240.729 139.646 240.729 cv
140.086 240.729 140.496 240.789 140.876 240.899 cv
141.256 241.019 141.626 241.189 141.966 241.419 cv
f
145.566 243.309 mo
145.086 243.309 144.706 243.499 144.426 243.879 cv
144.146 244.259 144.006 244.769 144.006 245.419 cv
144.006 246.079 144.136 246.589 144.416 246.969 cv
144.696 247.349 145.076 247.529 145.566 247.529 cv
146.046 247.529 146.426 247.349 146.706 246.969 cv
146.986 246.589 147.126 246.079 147.126 245.419 cv
147.126 244.779 146.986 244.259 146.706 243.879 cv
146.426 243.499 146.046 243.309 145.566 243.309 cv
145.566 242.549 mo
146.346 242.549 146.956 242.809 147.406 243.309 cv
147.846 243.819 148.076 244.519 148.076 245.419 cv
148.076 246.319 147.846 247.019 147.406 247.519 cv
146.956 248.029 146.346 248.279 145.566 248.279 cv
144.776 248.279 144.156 248.029 143.716 247.519 cv
143.276 247.019 143.056 246.319 143.056 245.419 cv
143.056 244.519 143.276 243.819 143.716 243.309 cv
144.156 242.809 144.776 242.549 145.566 242.549 cv
f
149.566 240.549 mo
150.466 240.549 li
150.466 248.149 li
149.566 248.149 li
149.566 240.549 li
f
154.466 243.309 mo
153.986 243.309 153.606 243.499 153.326 243.879 cv
153.046 244.259 152.906 244.769 152.906 245.419 cv
152.906 246.079 153.036 246.589 153.316 246.969 cv
153.596 247.349 153.976 247.529 154.466 247.529 cv
154.946 247.529 155.326 247.349 155.606 246.969 cv
155.886 246.589 156.026 246.079 156.026 245.419 cv
156.026 244.779 155.886 244.259 155.606 243.879 cv
155.326 243.499 154.946 243.309 154.466 243.309 cv
154.466 242.549 mo
155.246 242.549 155.856 242.809 156.306 243.309 cv
156.746 243.819 156.976 244.519 156.976 245.419 cv
156.976 246.319 156.746 247.019 156.306 247.519 cv
155.856 248.029 155.246 248.279 154.466 248.279 cv
153.676 248.279 153.056 248.029 152.616 247.519 cv
152.176 247.019 151.956 246.319 151.956 245.419 cv
151.956 244.519 152.176 243.819 152.616 243.309 cv
153.056 242.809 153.676 242.549 154.466 242.549 cv
f
163.016 244.849 mo
163.016 248.149 li
162.116 248.149 li
162.116 244.879 li
162.116 244.359 162.006 243.979 161.806 243.719 cv
161.606 243.459 161.306 243.329 160.906 243.329 cv
160.416 243.329 160.036 243.489 159.756 243.799 cv
159.476 244.109 159.336 244.529 159.336 245.059 cv
159.336 248.149 li
158.436 248.149 li
158.436 242.679 li
159.336 242.679 li
159.336 243.529 li
159.546 243.209 159.796 242.959 160.096 242.799 cv
160.386 242.639 160.726 242.549 161.106 242.549 cv
161.726 242.549 162.206 242.749 162.526 243.139 cv
162.846 243.529 163.016 244.099 163.016 244.849 cv
f
191.157 233.555 mo
191.157 237.055 li
f
191.157 233.555 mo
191.157 237.055 li
@
180.2 240.859 mo
181.19 240.859 li
181.19 247.319 li
184.74 247.319 li
184.74 248.149 li
180.2 248.149 li
180.2 240.859 li
f
190.41 245.189 mo
190.41 245.629 li
186.28 245.629 li
186.32 246.249 186.5 246.729 186.84 247.049 cv
187.17 247.369 187.63 247.529 188.23 247.529 cv
188.57 247.529 188.91 247.489 189.23 247.409 cv
189.55 247.329 189.88 247.199 190.2 247.019 cv
190.2 247.869 li
189.88 248.009 189.55 248.119 189.21 248.179 cv
188.87 248.239 188.52 248.279 188.18 248.279 cv
187.3 248.279 186.61 248.029 186.1 247.529 cv
185.59 247.029 185.34 246.339 185.34 245.469 cv
185.34 244.579 185.58 243.869 186.06 243.339 cv
186.54 242.819 187.2 242.549 188.02 242.549 cv
188.76 242.549 189.34 242.789 189.77 243.259 cv
190.19 243.739 190.41 244.379 190.41 245.189 cv
189.51 244.929 mo
189.5 244.439 189.36 244.049 189.1 243.749 cv
188.83 243.459 188.47 243.309 188.03 243.309 cv
187.53 243.309 187.13 243.459 186.83 243.739 cv
186.53 244.019 186.35 244.419 186.31 244.929 cv
189.51 244.929 li
f
191.79 245.989 mo
191.79 242.679 li
192.69 242.679 li
192.69 245.959 li
192.69 246.479 192.79 246.859 192.99 247.119 cv
193.19 247.379 193.49 247.509 193.9 247.509 cv
194.38 247.509 194.77 247.359 195.05 247.049 cv
195.33 246.739 195.47 246.319 195.47 245.779 cv
195.47 242.679 li
196.37 242.679 li
196.37 248.149 li
195.47 248.149 li
195.47 247.309 li
195.25 247.649 194.99 247.889 194.71 248.049 cv
194.42 248.199 194.09 248.279 193.71 248.279 cv
193.08 248.279 192.6 248.089 192.28 247.699 cv
191.95 247.319 191.79 246.749 191.79 245.989 cv
194.05 242.549 mo
194.05 242.549 li
f
198.19 240.549 mo
199.09 240.549 li
199.09 245.039 li
201.77 242.679 li
202.92 242.679 li
200.02 245.239 li
203.04 248.149 li
201.87 248.149 li
199.09 245.479 li
199.09 248.149 li
198.19 248.149 li
198.19 240.549 li
f
232.609 233.555 mo
232.609 237.055 li
f
232.609 233.555 mo
232.609 237.055 li
@
223.237 240.859 mo
224.707 240.859 li
226.567 245.819 li
228.437 240.859 li
229.907 240.859 li
229.907 248.149 li
228.947 248.149 li
228.947 241.749 li
227.067 246.749 li
226.077 246.749 li
224.197 241.749 li
224.197 248.149 li
223.237 248.149 li
223.237 240.859 li
f
234.107 248.649 mo
233.847 249.289 233.597 249.719 233.357 249.919 cv
233.117 250.119 232.797 250.219 232.397 250.219 cv
231.677 250.219 li
231.677 249.469 li
232.207 249.469 li
232.447 249.469 232.637 249.409 232.777 249.289 cv
232.917 249.169 233.067 248.899 233.237 248.459 cv
233.397 248.059 li
231.187 242.679 li
232.137 242.679 li
233.847 246.959 li
235.557 242.679 li
236.507 242.679 li
234.107 248.649 li
f
242.427 245.189 mo
242.427 245.629 li
238.297 245.629 li
238.337 246.249 238.517 246.729 238.857 247.049 cv
239.187 247.369 239.647 247.529 240.247 247.529 cv
240.587 247.529 240.927 247.489 241.247 247.409 cv
241.567 247.329 241.897 247.199 242.217 247.019 cv
242.217 247.869 li
241.897 248.009 241.567 248.119 241.227 248.179 cv
240.887 248.239 240.537 248.279 240.197 248.279 cv
239.317 248.279 238.627 248.029 238.117 247.529 cv
237.607 247.029 237.357 246.339 237.357 245.469 cv
237.357 244.579 237.597 243.869 238.077 243.339 cv
238.557 242.819 239.217 242.549 240.037 242.549 cv
240.777 242.549 241.357 242.789 241.787 243.259 cv
242.207 243.739 242.427 244.379 242.427 245.189 cv
241.527 244.929 mo
241.517 244.439 241.377 244.049 241.117 243.749 cv
240.847 243.459 240.487 243.309 240.047 243.309 cv
239.547 243.309 239.147 243.459 238.847 243.739 cv
238.547 244.019 238.367 244.419 238.327 244.929 cv
241.527 244.929 li
f
274.06 233.555 mo
274.06 237.055 li
f
274.06 233.555 mo
274.06 237.055 li
@
265.301 241.829 mo
263.961 245.459 li
266.641 245.459 li
265.301 241.829 li
264.741 240.859 mo
265.861 240.859 li
268.641 248.149 li
267.611 248.149 li
266.951 246.279 li
263.661 246.279 li
263.001 248.149 li
261.961 248.149 li
264.741 240.859 li
f
269.701 240.859 mo
270.691 240.859 li
270.691 247.319 li
274.241 247.319 li
274.241 248.149 li
269.701 248.149 li
269.701 240.859 li
f
275.271 240.859 mo
276.261 240.859 li
276.261 247.319 li
279.811 247.319 li
279.811 248.149 li
275.271 248.149 li
275.271 240.859 li
f
281.101 247.319 mo
282.711 247.319 li
282.711 241.759 li
280.961 242.109 li
280.961 241.209 li
282.701 240.859 li
283.691 240.859 li
283.691 247.319 li
285.301 247.319 li
285.301 248.149 li
281.101 248.149 li
281.101 247.319 li
f
315.512 233.555 mo
315.512 237.055 li
f
315.512 233.555 mo
315.512 237.055 li
@
306.752 241.829 mo
305.412 245.459 li
308.092 245.459 li
306.752 241.829 li
306.192 240.859 mo
307.312 240.859 li
310.092 248.149 li
309.062 248.149 li
308.402 246.279 li
305.112 246.279 li
304.452 248.149 li
303.412 248.149 li
306.192 240.859 li
f
311.152 240.859 mo
312.142 240.859 li
312.142 247.319 li
315.692 247.319 li
315.692 248.149 li
311.152 248.149 li
311.152 240.859 li
f
316.722 240.859 mo
317.712 240.859 li
317.712 247.319 li
321.262 247.319 li
321.262 248.149 li
316.722 248.149 li
316.722 240.859 li
f
323.232 247.319 mo
326.672 247.319 li
326.672 248.149 li
322.042 248.149 li
322.042 247.319 li
322.412 246.939 322.922 246.419 323.572 245.759 cv
324.212 245.109 324.622 244.689 324.792 244.499 cv
325.112 244.149 325.332 243.849 325.452 243.599 cv
325.572 243.359 325.642 243.109 325.642 242.869 cv
325.642 242.489 325.502 242.169 325.232 241.929 cv
324.962 241.689 324.612 241.559 324.172 241.559 cv
323.862 241.559 323.532 241.619 323.192 241.719 cv
322.852 241.829 322.482 241.989 322.092 242.209 cv
322.092 241.209 li
322.492 241.049 322.862 240.929 323.202 240.849 cv
323.542 240.769 323.862 240.729 324.152 240.729 cv
324.902 240.729 325.502 240.919 325.952 241.299 cv
326.402 241.679 326.632 242.179 326.632 242.809 cv
326.632 243.109 326.572 243.399 326.462 243.659 cv
326.352 243.929 326.152 244.249 325.852 244.609 cv
325.772 244.709 325.512 244.979 325.072 245.429 cv
324.632 245.879 324.022 246.509 323.232 247.319 cv
f
356.963 233.555 mo
356.963 237.055 li
f
356.963 233.555 mo
356.963 237.055 li
@
348.203 241.829 mo
346.863 245.459 li
349.543 245.459 li
348.203 241.829 li
347.643 240.859 mo
348.763 240.859 li
351.543 248.149 li
350.513 248.149 li
349.853 246.279 li
346.563 246.279 li
345.903 248.149 li
344.863 248.149 li
347.643 240.859 li
f
352.603 240.859 mo
353.593 240.859 li
353.593 247.319 li
357.143 247.319 li
357.143 248.149 li
352.603 248.149 li
352.603 240.859 li
f
358.174 240.859 mo
359.164 240.859 li
359.164 247.319 li
362.714 247.319 li
362.714 248.149 li
358.174 248.149 li
358.174 240.859 li
f
366.824 244.219 mo
367.294 244.319 367.664 244.529 367.924 244.849 cv
368.184 245.169 368.324 245.569 368.324 246.029 cv
368.324 246.749 368.074 247.309 367.584 247.699 cv
367.084 248.089 366.384 248.279 365.474 248.279 cv
365.164 248.279 364.844 248.249 364.524 248.189 cv
364.204 248.139 363.864 248.049 363.524 247.929 cv
363.524 246.979 li
363.794 247.139 364.094 247.259 364.424 247.339 cv
364.744 247.419 365.084 247.459 365.444 247.459 cv
366.064 247.459 366.534 247.339 366.854 247.099 cv
367.174 246.859 367.344 246.499 367.344 246.029 cv
367.344 245.609 367.194 245.269 366.894 245.029 cv
366.594 244.789 366.174 244.659 365.634 244.659 cv
364.784 244.659 li
364.784 243.849 li
365.674 243.849 li
366.154 243.849 366.524 243.759 366.784 243.559 cv
367.044 243.369 367.174 243.089 367.174 242.719 cv
367.174 242.349 367.034 242.059 366.774 241.859 cv
366.504 241.659 366.124 241.559 365.634 241.559 cv
365.364 241.559 365.074 241.589 364.764 241.649 cv
364.454 241.709 364.114 241.799 363.744 241.919 cv
363.744 241.039 li
364.114 240.939 364.464 240.859 364.794 240.809 cv
365.114 240.759 365.424 240.729 365.724 240.729 cv
366.464 240.729 367.054 240.899 367.494 241.239 cv
367.934 241.579 368.154 242.039 368.154 242.619 cv
368.154 243.019 368.034 243.359 367.804 243.639 cv
367.574 243.919 367.244 244.119 366.824 244.219 cv
f
398.415 233.555 mo
398.415 237.055 li
f
398.415 233.555 mo
398.415 237.055 li
@
389.655 241.829 mo
388.315 245.459 li
390.995 245.459 li
389.655 241.829 li
389.095 240.859 mo
390.215 240.859 li
392.995 248.149 li
391.965 248.149 li
391.305 246.279 li
388.015 246.279 li
387.355 248.149 li
386.315 248.149 li
389.095 240.859 li
f
394.055 240.859 mo
395.045 240.859 li
395.045 247.319 li
398.595 247.319 li
398.595 248.149 li
394.055 248.149 li
394.055 240.859 li
f
399.625 240.859 mo
400.615 240.859 li
400.615 247.319 li
404.165 247.319 li
404.165 248.149 li
399.625 248.149 li
399.625 240.859 li
f
407.995 241.719 mo
405.505 245.609 li
407.995 245.609 li
407.995 241.719 li
407.735 240.859 mo
408.975 240.859 li
408.975 245.609 li
410.015 245.609 li
410.015 246.429 li
408.975 246.429 li
408.975 248.149 li
407.995 248.149 li
407.995 246.429 li
404.705 246.429 li
404.705 245.479 li
407.735 240.859 li
f
439.866 233.555 mo
439.866 237.055 li
f
439.866 233.555 mo
439.866 237.055 li
@
435.9 241.419 mo
435.9 242.459 li
435.56 242.159 435.21 241.929 434.83 241.769 cv
434.45 241.619 434.06 241.539 433.64 241.539 cv
432.8 241.539 432.16 241.799 431.72 242.309 cv
431.28 242.819 431.06 243.549 431.06 244.509 cv
431.06 245.469 431.28 246.209 431.72 246.719 cv
432.16 247.229 432.8 247.479 433.64 247.479 cv
434.06 247.479 434.45 247.409 434.83 247.249 cv
435.21 247.099 435.56 246.869 435.9 246.559 cv
435.9 247.589 li
435.55 247.829 435.18 247.999 434.8 248.109 cv
434.42 248.219 434.01 248.279 433.58 248.279 cv
432.48 248.279 431.61 247.949 430.97 247.279 cv
430.33 246.609 430.02 245.689 430.02 244.509 cv
430.02 243.339 430.33 242.419 430.97 241.739 cv
431.61 241.069 432.48 240.729 433.58 240.729 cv
434.02 240.729 434.43 240.789 434.81 240.899 cv
435.19 241.019 435.56 241.189 435.9 241.419 cv
f
437.42 240.859 mo
438.75 240.859 li
441.98 246.959 li
441.98 240.859 li
442.94 240.859 li
442.94 248.149 li
441.61 248.149 li
438.38 242.049 li
438.38 248.149 li
437.42 248.149 li
437.42 240.859 li
f
449.27 241.099 mo
449.27 242.059 li
448.89 241.879 448.54 241.749 448.21 241.659 cv
447.87 241.579 447.55 241.529 447.25 241.529 cv
446.71 241.529 446.29 241.639 446 241.839 cv
445.71 242.049 445.57 242.349 445.57 242.729 cv
445.57 243.049 445.66 243.299 445.86 243.459 cv
446.05 243.629 446.42 243.759 446.96 243.859 cv
447.56 243.979 li
448.29 244.119 448.83 244.369 449.18 244.719 cv
449.53 245.079 449.71 245.549 449.71 246.139 cv
449.71 246.849 449.47 247.379 449 247.739 cv
448.52 248.099 447.83 248.279 446.92 248.279 cv
446.57 248.279 446.2 248.239 445.81 248.169 cv
445.42 248.099 445.02 247.989 444.61 247.829 cv
444.61 246.809 li
445.01 247.039 445.4 247.209 445.78 247.319 cv
446.16 247.439 446.54 247.489 446.92 247.489 cv
447.48 247.489 447.91 247.379 448.22 247.159 cv
448.52 246.939 448.68 246.629 448.68 246.209 cv
448.68 245.849 448.57 245.569 448.35 245.369 cv
448.13 245.169 447.77 245.019 447.27 244.919 cv
446.67 244.799 li
445.93 244.659 445.4 244.429 445.07 244.109 cv
444.74 243.799 444.58 243.369 444.58 242.809 cv
444.58 242.169 444.8 241.659 445.26 241.289 cv
445.71 240.919 446.34 240.729 447.14 240.729 cv
447.48 240.729 447.82 240.759 448.18 240.819 cv
448.53 240.879 448.89 240.979 449.27 241.099 cv
f
481.317 233.555 mo
481.317 237.055 li
f
481.317 233.555 mo
481.317 237.055 li
@
471.672 240.859 mo
472.662 240.859 li
472.662 247.319 li
476.212 247.319 li
476.212 248.149 li
471.672 248.149 li
471.672 240.859 li
f
479.482 248.649 mo
479.222 249.289 478.972 249.719 478.732 249.919 cv
478.492 250.119 478.172 250.219 477.772 250.219 cv
477.052 250.219 li
477.052 249.469 li
477.582 249.469 li
477.822 249.469 478.012 249.409 478.152 249.289 cv
478.292 249.169 478.442 248.899 478.612 248.459 cv
478.772 248.059 li
476.562 242.679 li
477.512 242.679 li
479.222 246.959 li
480.932 242.679 li
481.882 242.679 li
479.482 248.649 li
f
487.382 243.729 mo
487.602 243.329 487.872 243.039 488.182 242.839 cv
488.492 242.649 488.862 242.549 489.292 242.549 cv
489.852 242.549 490.292 242.749 490.602 243.149 cv
490.912 243.549 491.072 244.119 491.072 244.849 cv
491.072 248.149 li
490.172 248.149 li
490.172 244.879 li
490.172 244.359 490.072 243.969 489.892 243.709 cv
489.702 243.459 489.422 243.329 489.042 243.329 cv
488.572 243.329 488.202 243.489 487.932 243.799 cv
487.662 244.109 487.532 244.529 487.532 245.059 cv
487.532 248.149 li
486.632 248.149 li
486.632 244.879 li
486.632 244.359 486.532 243.969 486.352 243.709 cv
486.162 243.459 485.872 243.329 485.492 243.329 cv
485.032 243.329 484.662 243.489 484.392 243.799 cv
484.122 244.109 483.992 244.529 483.992 245.059 cv
483.992 248.149 li
483.092 248.149 li
483.092 242.679 li
483.992 242.679 li
483.992 243.529 li
484.192 243.199 484.442 242.949 484.732 242.789 cv
485.012 242.629 485.352 242.549 485.752 242.549 cv
486.152 242.549 486.482 242.649 486.762 242.849 cv
487.042 243.049 487.242 243.349 487.382 243.729 cv
f
522.769 233.555 mo
522.769 237.055 li
f
522.769 233.555 mo
522.769 237.055 li
@
510.283 241.829 mo
508.943 245.459 li
511.623 245.459 li
510.283 241.829 li
509.723 240.859 mo
510.843 240.859 li
513.623 248.149 li
512.593 248.149 li
511.933 246.279 li
508.643 246.279 li
507.983 248.149 li
506.943 248.149 li
509.723 240.859 li
f
518.243 243.509 mo
518.243 240.549 li
519.143 240.549 li
519.143 248.149 li
518.243 248.149 li
518.243 247.329 li
518.053 247.659 517.813 247.899 517.523 248.049 cv
517.233 248.199 516.893 248.279 516.493 248.279 cv
515.833 248.279 515.293 248.019 514.873 247.499 cv
514.453 246.979 514.253 246.279 514.253 245.419 cv
514.253 244.559 514.453 243.869 514.873 243.339 cv
515.293 242.819 515.833 242.549 516.493 242.549 cv
516.893 242.549 517.233 242.629 517.523 242.789 cv
517.813 242.949 518.053 243.189 518.243 243.509 cv
515.183 245.419 mo
515.183 246.079 515.313 246.599 515.583 246.979 cv
515.853 247.359 516.233 247.539 516.713 247.539 cv
517.183 247.539 517.553 247.359 517.833 246.979 cv
518.103 246.599 518.243 246.079 518.243 245.419 cv
518.243 244.759 518.103 244.249 517.833 243.869 cv
517.553 243.489 517.183 243.299 516.713 243.299 cv
516.233 243.299 515.853 243.489 515.583 243.869 cv
515.313 244.249 515.183 244.759 515.183 245.419 cv
f
525.673 245.189 mo
525.673 245.629 li
521.543 245.629 li
521.583 246.249 521.763 246.729 522.103 247.049 cv
522.433 247.369 522.893 247.529 523.493 247.529 cv
523.833 247.529 524.173 247.489 524.493 247.409 cv
524.813 247.329 525.143 247.199 525.463 247.019 cv
525.463 247.869 li
525.143 248.009 524.813 248.119 524.473 248.179 cv
524.133 248.239 523.783 248.279 523.443 248.279 cv
522.563 248.279 521.873 248.029 521.363 247.529 cv
520.853 247.029 520.603 246.339 520.603 245.469 cv
520.603 244.579 520.843 243.869 521.323 243.339 cv
521.803 242.819 522.463 242.549 523.283 242.549 cv
524.023 242.549 524.603 242.789 525.033 243.259 cv
525.453 243.739 525.673 244.379 525.673 245.189 cv
524.773 244.929 mo
524.763 244.439 524.623 244.049 524.363 243.749 cv
524.093 243.459 523.733 243.309 523.293 243.309 cv
522.793 243.309 522.393 243.459 522.093 243.739 cv
521.793 244.019 521.613 244.419 521.573 244.929 cv
524.773 244.929 li
f
531.693 244.849 mo
531.693 248.149 li
530.793 248.149 li
530.793 244.879 li
530.793 244.359 530.683 243.979 530.483 243.719 cv
530.283 243.459 529.983 243.329 529.583 243.329 cv
529.093 243.329 528.713 243.489 528.433 243.799 cv
528.153 244.109 528.013 244.529 528.013 245.059 cv
528.013 248.149 li
527.113 248.149 li
527.113 242.679 li
528.013 242.679 li
528.013 243.529 li
528.223 243.209 528.473 242.959 528.773 242.799 cv
529.063 242.639 529.403 242.549 529.783 242.549 cv
530.403 242.549 530.883 242.749 531.203 243.139 cv
531.523 243.529 531.693 244.099 531.693 244.849 cv
f
535.603 243.309 mo
535.123 243.309 534.743 243.499 534.463 243.879 cv
534.183 244.259 534.043 244.769 534.043 245.419 cv
534.043 246.079 534.173 246.589 534.453 246.969 cv
534.733 247.349 535.113 247.529 535.603 247.529 cv
536.083 247.529 536.463 247.349 536.743 246.969 cv
537.023 246.589 537.163 246.079 537.163 245.419 cv
537.163 244.779 537.023 244.259 536.743 243.879 cv
536.463 243.499 536.083 243.309 535.603 243.309 cv
535.603 242.549 mo
536.383 242.549 536.993 242.809 537.443 243.309 cv
537.883 243.819 538.113 244.519 538.113 245.419 cv
538.113 246.319 537.883 247.019 537.443 247.519 cv
536.993 248.029 536.383 248.279 535.603 248.279 cv
534.813 248.279 534.193 248.029 533.753 247.519 cv
533.313 247.019 533.093 246.319 533.093 245.419 cv
533.093 244.519 533.313 243.819 533.753 243.309 cv
534.193 242.809 534.813 242.549 535.603 242.549 cv
f
564.22 233.555 mo
564.22 237.055 li
f
564.22 233.555 mo
564.22 237.055 li
@
560.623 247.109 mo
560.623 245.149 li
559.013 245.149 li
559.013 244.339 li
561.603 244.339 li
561.603 247.469 li
561.223 247.749 560.803 247.949 560.343 248.079 cv
559.883 248.209 559.393 248.279 558.873 248.279 cv
557.733 248.279 556.833 247.949 556.193 247.289 cv
555.553 246.629 555.233 245.699 555.233 244.509 cv
555.233 243.329 555.553 242.399 556.193 241.729 cv
556.833 241.069 557.733 240.729 558.873 240.729 cv
559.343 240.729 559.793 240.789 560.223 240.909 cv
560.653 241.029 561.053 241.199 561.413 241.419 cv
561.413 242.469 li
561.043 242.169 560.653 241.939 560.243 241.779 cv
559.833 241.619 559.403 241.539 558.953 241.539 cv
558.053 241.539 557.383 241.789 556.943 242.289 cv
556.493 242.789 556.273 243.529 556.273 244.509 cv
556.273 245.499 556.493 246.239 556.943 246.739 cv
557.383 247.239 558.053 247.479 558.953 247.479 cv
559.293 247.479 559.603 247.449 559.883 247.389 cv
560.163 247.329 560.403 247.239 560.623 247.109 cv
f
565.853 245.399 mo
565.123 245.399 564.623 245.489 564.343 245.649 cv
564.063 245.819 563.923 246.099 563.923 246.499 cv
563.923 246.819 564.023 247.079 564.233 247.259 cv
564.443 247.449 564.733 247.539 565.093 247.539 cv
565.593 247.539 565.993 247.369 566.293 247.009 cv
566.593 246.659 566.743 246.189 566.743 245.599 cv
566.743 245.399 li
565.853 245.399 li
567.643 245.029 mo
567.643 248.149 li
566.743 248.149 li
566.743 247.319 li
566.533 247.659 566.273 247.899 565.973 248.049 cv
565.673 248.199 565.293 248.279 564.853 248.279 cv
564.293 248.279 563.843 248.129 563.513 247.819 cv
563.183 247.509 563.023 247.089 563.023 246.559 cv
563.023 245.949 563.223 245.489 563.643 245.169 cv
564.053 244.859 564.663 244.699 565.483 244.699 cv
566.743 244.699 li
566.743 244.609 li
566.743 244.199 566.603 243.879 566.333 243.649 cv
566.063 243.429 565.683 243.309 565.193 243.309 cv
564.873 243.309 564.573 243.349 564.273 243.429 cv
563.973 243.509 563.693 243.619 563.423 243.759 cv
563.423 242.929 li
563.743 242.809 564.063 242.709 564.373 242.649 cv
564.683 242.589 564.983 242.549 565.283 242.549 cv
566.073 242.549 566.663 242.759 567.053 243.169 cv
567.443 243.579 567.643 244.199 567.643 245.029 cv
f
572.983 242.839 mo
572.983 243.689 li
572.723 243.569 572.463 243.469 572.193 243.399 cv
571.913 243.339 571.633 243.299 571.343 243.299 cv
570.893 243.299 570.553 243.369 570.333 243.509 cv
570.113 243.649 570.003 243.849 570.003 244.119 cv
570.003 244.329 570.083 244.489 570.243 244.609 cv
570.403 244.729 570.723 244.849 571.203 244.949 cv
571.513 245.019 li
572.153 245.159 572.603 245.359 572.873 245.599 cv
573.133 245.849 573.273 246.199 573.273 246.639 cv
573.273 247.149 573.073 247.549 572.673 247.839 cv
572.273 248.139 571.713 248.279 571.013 248.279 cv
570.713 248.279 570.413 248.249 570.093 248.199 cv
569.773 248.149 569.443 248.069 569.093 247.949 cv
569.093 247.019 li
569.423 247.199 569.753 247.329 570.073 247.409 cv
570.393 247.499 570.713 247.539 571.033 247.539 cv
571.453 247.539 571.783 247.469 572.013 247.329 cv
572.233 247.189 572.353 246.979 572.353 246.709 cv
572.353 246.469 572.263 246.279 572.103 246.149 cv
571.943 246.019 571.583 245.889 571.023 245.769 cv
570.713 245.699 li
570.153 245.579 569.743 245.399 569.503 245.159 cv
569.253 244.919 569.133 244.589 569.133 244.159 cv
569.133 243.649 569.313 243.249 569.673 242.969 cv
570.033 242.689 570.553 242.549 571.233 242.549 cv
571.563 242.549 571.873 242.579 572.173 242.629 cv
572.463 242.679 572.733 242.749 572.983 242.839 cv
f
605.672 233.555 mo
605.672 237.055 li
f
605.672 233.555 mo
605.672 237.055 li
@
598.895 247.109 mo
598.895 245.149 li
597.285 245.149 li
597.285 244.339 li
599.875 244.339 li
599.875 247.469 li
599.495 247.749 599.075 247.949 598.615 248.079 cv
598.155 248.209 597.665 248.279 597.145 248.279 cv
596.005 248.279 595.105 247.949 594.465 247.289 cv
593.825 246.629 593.505 245.699 593.505 244.509 cv
593.505 243.329 593.825 242.399 594.465 241.729 cv
595.105 241.069 596.005 240.729 597.145 240.729 cv
597.615 240.729 598.065 240.789 598.495 240.909 cv
598.925 241.029 599.325 241.199 599.685 241.419 cv
599.685 242.469 li
599.315 242.169 598.925 241.939 598.515 241.779 cv
598.105 241.619 597.675 241.539 597.225 241.539 cv
596.325 241.539 595.655 241.789 595.215 242.289 cv
594.765 242.789 594.545 243.529 594.545 244.509 cv
594.545 245.499 594.765 246.239 595.215 246.739 cv
595.655 247.239 596.325 247.479 597.225 247.479 cv
597.565 247.479 597.875 247.449 598.155 247.389 cv
598.435 247.329 598.675 247.239 598.895 247.109 cv
f
604.125 245.399 mo
603.395 245.399 602.895 245.489 602.615 245.649 cv
602.335 245.819 602.195 246.099 602.195 246.499 cv
602.195 246.819 602.295 247.079 602.505 247.259 cv
602.715 247.449 603.005 247.539 603.365 247.539 cv
603.865 247.539 604.265 247.369 604.565 247.009 cv
604.865 246.659 605.015 246.189 605.015 245.599 cv
605.015 245.399 li
604.125 245.399 li
605.915 245.029 mo
605.915 248.149 li
605.015 248.149 li
605.015 247.319 li
604.805 247.659 604.545 247.899 604.245 248.049 cv
603.945 248.199 603.565 248.279 603.125 248.279 cv
602.565 248.279 602.115 248.129 601.785 247.819 cv
601.455 247.509 601.295 247.089 601.295 246.559 cv
601.295 245.949 601.495 245.489 601.915 245.169 cv
602.325 244.859 602.935 244.699 603.755 244.699 cv
605.015 244.699 li
605.015 244.609 li
605.015 244.199 604.875 243.879 604.605 243.649 cv
604.335 243.429 603.955 243.309 603.465 243.309 cv
603.145 243.309 602.845 243.349 602.545 243.429 cv
602.245 243.509 601.965 243.619 601.695 243.759 cv
601.695 242.929 li
602.015 242.809 602.335 242.709 602.645 242.649 cv
602.955 242.589 603.255 242.549 603.555 242.549 cv
604.345 242.549 604.935 242.759 605.325 243.169 cv
605.715 243.579 605.915 244.199 605.915 245.029 cv
f
611.255 242.839 mo
611.255 243.689 li
610.995 243.569 610.735 243.469 610.465 243.399 cv
610.185 243.339 609.905 243.299 609.615 243.299 cv
609.165 243.299 608.825 243.369 608.605 243.509 cv
608.385 243.649 608.275 243.849 608.275 244.119 cv
608.275 244.329 608.355 244.489 608.515 244.609 cv
608.675 244.729 608.995 244.849 609.475 244.949 cv
609.785 245.019 li
610.425 245.159 610.875 245.359 611.145 245.599 cv
611.405 245.849 611.545 246.199 611.545 246.639 cv
611.545 247.149 611.345 247.549 610.945 247.839 cv
610.545 248.139 609.985 248.279 609.285 248.279 cv
608.985 248.279 608.685 248.249 608.365 248.199 cv
608.045 248.149 607.715 248.069 607.365 247.949 cv
607.365 247.019 li
607.695 247.199 608.025 247.329 608.345 247.409 cv
608.665 247.499 608.985 247.539 609.305 247.539 cv
609.725 247.539 610.055 247.469 610.285 247.329 cv
610.505 247.189 610.625 246.979 610.625 246.709 cv
610.625 246.469 610.535 246.279 610.375 246.149 cv
610.215 246.019 609.855 245.889 609.295 245.769 cv
608.985 245.699 li
608.425 245.579 608.015 245.399 607.775 245.159 cv
607.525 244.919 607.405 244.589 607.405 244.159 cv
607.405 243.649 607.585 243.249 607.945 242.969 cv
608.305 242.689 608.825 242.549 609.505 242.549 cv
609.835 242.549 610.145 242.579 610.445 242.629 cv
610.735 242.679 611.005 242.749 611.255 242.839 cv
f
613.275 247.319 mo
614.885 247.319 li
614.885 241.759 li
613.135 242.109 li
613.135 241.209 li
614.875 240.859 li
615.865 240.859 li
615.865 247.319 li
617.475 247.319 li
617.475 248.149 li
613.275 248.149 li
613.275 247.319 li
f
647.123 233.555 mo
647.123 237.055 li
f
647.123 233.555 mo
647.123 237.055 li
@
640.347 247.109 mo
640.347 245.149 li
638.737 245.149 li
638.737 244.339 li
641.327 244.339 li
641.327 247.469 li
640.947 247.749 640.527 247.949 640.067 248.079 cv
639.607 248.209 639.117 248.279 638.597 248.279 cv
637.457 248.279 636.557 247.949 635.917 247.289 cv
635.277 246.629 634.957 245.699 634.957 244.509 cv
634.957 243.329 635.277 242.399 635.917 241.729 cv
636.557 241.069 637.457 240.729 638.597 240.729 cv
639.067 240.729 639.517 240.789 639.947 240.909 cv
640.377 241.029 640.777 241.199 641.137 241.419 cv
641.137 242.469 li
640.767 242.169 640.377 241.939 639.967 241.779 cv
639.557 241.619 639.127 241.539 638.677 241.539 cv
637.777 241.539 637.107 241.789 636.667 242.289 cv
636.217 242.789 635.997 243.529 635.997 244.509 cv
635.997 245.499 636.217 246.239 636.667 246.739 cv
637.107 247.239 637.777 247.479 638.677 247.479 cv
639.017 247.479 639.327 247.449 639.607 247.389 cv
639.887 247.329 640.127 247.239 640.347 247.109 cv
f
645.576 245.399 mo
644.846 245.399 644.346 245.489 644.066 245.649 cv
643.786 245.819 643.646 246.099 643.646 246.499 cv
643.646 246.819 643.746 247.079 643.956 247.259 cv
644.167 247.449 644.456 247.539 644.816 247.539 cv
645.316 247.539 645.716 247.369 646.016 247.009 cv
646.316 246.659 646.466 246.189 646.466 245.599 cv
646.466 245.399 li
645.576 245.399 li
647.366 245.029 mo
647.366 248.149 li
646.466 248.149 li
646.466 247.319 li
646.256 247.659 645.996 247.899 645.696 248.049 cv
645.396 248.199 645.016 248.279 644.576 248.279 cv
644.016 248.279 643.566 248.129 643.237 247.819 cv
642.906 247.509 642.746 247.089 642.746 246.559 cv
642.746 245.949 642.946 245.489 643.366 245.169 cv
643.776 244.859 644.386 244.699 645.206 244.699 cv
646.466 244.699 li
646.466 244.609 li
646.466 244.199 646.326 243.879 646.056 243.649 cv
645.786 243.429 645.406 243.309 644.917 243.309 cv
644.596 243.309 644.297 243.349 643.996 243.429 cv
643.696 243.509 643.417 243.619 643.146 243.759 cv
643.146 242.929 li
643.466 242.809 643.786 242.709 644.096 242.649 cv
644.406 242.589 644.706 242.549 645.006 242.549 cv
645.797 242.549 646.386 242.759 646.776 243.169 cv
647.167 243.579 647.366 244.199 647.366 245.029 cv
f
652.707 242.839 mo
652.707 243.689 li
652.447 243.569 652.187 243.469 651.917 243.399 cv
651.637 243.339 651.357 243.299 651.067 243.299 cv
650.617 243.299 650.277 243.369 650.057 243.509 cv
649.837 243.649 649.727 243.849 649.727 244.119 cv
649.727 244.329 649.807 244.489 649.967 244.609 cv
650.127 244.729 650.447 244.849 650.927 244.949 cv
651.237 245.019 li
651.877 245.159 652.327 245.359 652.597 245.599 cv
652.857 245.849 652.997 246.199 652.997 246.639 cv
652.997 247.149 652.797 247.549 652.397 247.839 cv
651.997 248.139 651.437 248.279 650.737 248.279 cv
650.437 248.279 650.137 248.249 649.817 248.199 cv
649.497 248.149 649.167 248.069 648.817 247.949 cv
648.817 247.019 li
649.147 247.199 649.477 247.329 649.797 247.409 cv
650.117 247.499 650.437 247.539 650.757 247.539 cv
651.177 247.539 651.507 247.469 651.737 247.329 cv
651.957 247.189 652.077 246.979 652.077 246.709 cv
652.077 246.469 651.987 246.279 651.827 246.149 cv
651.667 246.019 651.307 245.889 650.747 245.769 cv
650.437 245.699 li
649.877 245.579 649.467 245.399 649.227 245.159 cv
648.977 244.919 648.857 244.589 648.857 244.159 cv
648.857 243.649 649.037 243.249 649.397 242.969 cv
649.757 242.689 650.277 242.549 650.957 242.549 cv
651.287 242.549 651.597 242.579 651.897 242.629 cv
652.187 242.679 652.457 242.749 652.707 242.839 cv
f
655.406 247.319 mo
658.846 247.319 li
658.846 248.149 li
654.216 248.149 li
654.216 247.319 li
654.586 246.939 655.096 246.419 655.747 245.759 cv
656.387 245.109 656.797 244.689 656.966 244.499 cv
657.286 244.149 657.507 243.849 657.627 243.599 cv
657.747 243.359 657.817 243.109 657.817 242.869 cv
657.817 242.489 657.677 242.169 657.406 241.929 cv
657.137 241.689 656.786 241.559 656.346 241.559 cv
656.036 241.559 655.706 241.619 655.367 241.719 cv
655.026 241.829 654.656 241.989 654.267 242.209 cv
654.267 241.209 li
654.667 241.049 655.036 240.929 655.377 240.849 cv
655.716 240.769 656.036 240.729 656.327 240.729 cv
657.077 240.729 657.677 240.919 658.127 241.299 cv
658.577 241.679 658.807 242.179 658.807 242.809 cv
658.807 243.109 658.747 243.399 658.637 243.659 cv
658.526 243.929 658.327 244.249 658.026 244.609 cv
657.947 244.709 657.687 244.979 657.247 245.429 cv
656.807 245.879 656.197 246.509 655.406 247.319 cv
f
688.575 233.555 mo
688.575 237.055 li
f
688.575 233.555 mo
688.575 237.055 li
@
678.469 240.859 mo
684.629 240.859 li
684.629 241.689 li
682.039 241.689 li
682.039 248.149 li
681.049 248.149 li
681.049 241.689 li
678.469 241.689 li
678.469 240.859 li
f
685.839 247.319 mo
687.448 247.319 li
687.448 241.759 li
685.698 242.109 li
685.698 241.209 li
687.439 240.859 li
688.429 240.859 li
688.429 247.319 li
690.039 247.319 li
690.039 248.149 li
685.839 248.149 li
685.839 247.319 li
f
692.928 241.669 mo
692.928 247.339 li
694.118 247.339 li
695.118 247.339 695.859 247.119 696.328 246.659 cv
696.789 246.199 697.029 245.479 697.029 244.499 cv
697.029 243.519 696.789 242.809 696.328 242.349 cv
695.859 241.899 695.118 241.669 694.118 241.669 cv
692.928 241.669 li
691.938 240.859 mo
693.969 240.859 li
695.378 240.859 696.419 241.159 697.078 241.739 cv
697.739 242.329 698.068 243.249 698.068 244.499 cv
698.068 245.759 697.729 246.679 697.068 247.269 cv
696.409 247.859 695.368 248.149 693.969 248.149 cv
691.938 248.149 li
691.938 240.859 li
f
730.026 233.555 mo
730.026 237.055 li
f
730.026 233.555 mo
730.026 237.055 li
@
719.149 241.099 mo
719.149 242.059 li
718.769 241.879 718.419 241.749 718.089 241.659 cv
717.749 241.579 717.429 241.529 717.129 241.529 cv
716.589 241.529 716.169 241.639 715.879 241.839 cv
715.589 242.049 715.449 242.349 715.449 242.729 cv
715.449 243.049 715.539 243.299 715.739 243.459 cv
715.929 243.629 716.299 243.759 716.839 243.859 cv
717.439 243.979 li
718.169 244.119 718.709 244.369 719.059 244.719 cv
719.409 245.079 719.589 245.549 719.589 246.139 cv
719.589 246.849 719.349 247.379 718.879 247.739 cv
718.399 248.099 717.709 248.279 716.799 248.279 cv
716.449 248.279 716.079 248.239 715.689 248.169 cv
715.299 248.099 714.899 247.989 714.489 247.829 cv
714.489 246.809 li
714.889 247.039 715.279 247.209 715.659 247.319 cv
716.039 247.439 716.419 247.489 716.799 247.489 cv
717.359 247.489 717.789 247.379 718.099 247.159 cv
718.399 246.939 718.559 246.629 718.559 246.209 cv
718.559 245.849 718.449 245.569 718.229 245.369 cv
718.009 245.169 717.649 245.019 717.149 244.919 cv
716.549 244.799 li
715.809 244.659 715.279 244.429 714.949 244.109 cv
714.619 243.799 714.459 243.369 714.459 242.809 cv
714.459 242.169 714.679 241.659 715.139 241.289 cv
715.589 240.919 716.219 240.729 717.019 240.729 cv
717.359 240.729 717.699 240.759 718.059 240.819 cv
718.409 240.879 718.769 240.979 719.149 241.099 cv
f
721.979 241.129 mo
721.979 242.679 li
723.829 242.679 li
723.829 243.379 li
721.979 243.379 li
721.979 246.349 li
721.979 246.799 722.039 247.089 722.159 247.209 cv
722.279 247.339 722.529 247.399 722.909 247.399 cv
723.829 247.399 li
723.829 248.149 li
722.909 248.149 li
722.209 248.149 721.729 248.019 721.469 247.759 cv
721.209 247.499 721.079 247.029 721.079 246.349 cv
721.079 243.379 li
720.419 243.379 li
720.419 242.679 li
721.079 242.679 li
721.079 241.129 li
721.979 241.129 li
f
728.179 243.519 mo
728.079 243.459 727.969 243.419 727.849 243.389 cv
727.729 243.369 727.599 243.349 727.459 243.349 cv
726.949 243.349 726.559 243.519 726.289 243.849 cv
726.009 244.179 725.879 244.649 725.879 245.269 cv
725.879 248.149 li
724.979 248.149 li
724.979 242.679 li
725.879 242.679 li
725.879 243.529 li
726.059 243.199 726.309 242.949 726.609 242.789 cv
726.909 242.629 727.279 242.549 727.719 242.549 cv
727.929 242.559 li
727.999 242.569 728.079 242.579 728.179 242.599 cv
728.179 243.519 li
f
731.239 243.309 mo
730.759 243.309 730.379 243.499 730.099 243.879 cv
729.819 244.259 729.679 244.769 729.679 245.419 cv
729.679 246.079 729.809 246.589 730.089 246.969 cv
730.369 247.349 730.749 247.529 731.239 247.529 cv
731.719 247.529 732.099 247.349 732.379 246.969 cv
732.659 246.589 732.799 246.079 732.799 245.419 cv
732.799 244.779 732.659 244.259 732.379 243.879 cv
732.099 243.499 731.719 243.309 731.239 243.309 cv
731.239 242.549 mo
732.019 242.549 732.629 242.809 733.079 243.309 cv
733.519 243.819 733.749 244.519 733.749 245.419 cv
733.749 246.319 733.519 247.019 733.079 247.519 cv
732.629 248.029 732.019 248.279 731.239 248.279 cv
730.449 248.279 729.829 248.029 729.389 247.519 cv
728.949 247.019 728.729 246.319 728.729 245.419 cv
728.729 244.519 728.949 243.819 729.389 243.309 cv
729.829 242.809 730.449 242.549 731.239 242.549 cv
f
735.209 240.549 mo
736.109 240.549 li
736.109 245.039 li
738.789 242.679 li
739.939 242.679 li
737.039 245.239 li
740.059 248.149 li
738.889 248.149 li
736.109 245.479 li
736.109 248.149 li
735.209 248.149 li
735.209 240.549 li
f
745.709 245.189 mo
745.709 245.629 li
741.579 245.629 li
741.619 246.249 741.799 246.729 742.139 247.049 cv
742.469 247.369 742.929 247.529 743.529 247.529 cv
743.869 247.529 744.209 247.489 744.529 247.409 cv
744.849 247.329 745.179 247.199 745.499 247.019 cv
745.499 247.869 li
745.179 248.009 744.849 248.119 744.509 248.179 cv
744.169 248.239 743.819 248.279 743.479 248.279 cv
742.599 248.279 741.909 248.029 741.399 247.529 cv
740.889 247.029 740.639 246.339 740.639 245.469 cv
740.639 244.579 740.879 243.869 741.359 243.339 cv
741.839 242.819 742.499 242.549 743.319 242.549 cv
744.059 242.549 744.639 242.789 745.069 243.259 cv
745.489 243.739 745.709 244.379 745.709 245.189 cv
744.809 244.929 mo
744.799 244.439 744.659 244.049 744.399 243.749 cv
744.129 243.459 743.769 243.309 743.329 243.309 cv
742.829 243.309 742.429 243.459 742.129 243.739 cv
741.829 244.019 741.649 244.419 741.609 244.929 cv
744.809 244.929 li
f
46.0774 233.555 mo
42.5774 233.555 li
f
46.0774 233.555 mo
42.5774 233.555 li
@
26.3511 230.712 mo
25.8411 230.712 25.4611 230.962 25.2011 231.462 cv
24.9411 231.962 24.8211 232.712 24.8211 233.712 cv
24.8211 234.712 24.9411 235.462 25.2011 235.962 cv
25.4611 236.462 25.8411 236.712 26.3511 236.712 cv
26.8611 236.712 27.2411 236.462 27.5011 235.962 cv
27.7511 235.462 27.8811 234.712 27.8811 233.712 cv
27.8811 232.712 27.7511 231.962 27.5011 231.462 cv
27.2411 230.962 26.8611 230.712 26.3511 230.712 cv
26.3511 229.932 mo
27.1611 229.932 27.7811 230.262 28.2211 230.902 cv
28.6511 231.552 28.8711 232.492 28.8711 233.712 cv
28.8711 234.942 28.6511 235.882 28.2211 236.522 cv
27.7811 237.162 27.1611 237.482 26.3511 237.482 cv
25.5311 237.482 24.9011 237.162 24.4711 236.522 cv
24.0411 235.882 23.8311 234.942 23.8311 233.712 cv
23.8311 232.492 24.0411 231.552 24.4711 230.902 cv
24.9011 230.262 25.5311 229.932 26.3511 229.932 cv
f
30.6012 236.112 mo
31.6312 236.112 li
31.6312 237.352 li
30.6012 237.352 li
30.6012 236.112 li
f
33.5311 230.062 mo
38.2211 230.062 li
38.2211 230.482 li
35.5711 237.352 li
34.5411 237.352 li
37.0311 230.892 li
33.5311 230.892 li
33.5311 230.062 li
f
46.0774 178.115 mo
42.5774 178.115 li
f
46.0774 178.115 mo
42.5774 178.115 li
@
26.3511 175.272 mo
25.8411 175.272 25.4611 175.522 25.2011 176.022 cv
24.9411 176.522 24.8211 177.272 24.8211 178.272 cv
24.8211 179.272 24.9411 180.022 25.2011 180.522 cv
25.4611 181.022 25.8411 181.272 26.3511 181.272 cv
26.8611 181.272 27.2411 181.022 27.5011 180.522 cv
27.7511 180.022 27.8811 179.272 27.8811 178.272 cv
27.8811 177.272 27.7511 176.522 27.5011 176.022 cv
27.2411 175.522 26.8611 175.272 26.3511 175.272 cv
26.3511 174.492 mo
27.1611 174.492 27.7811 174.822 28.2211 175.462 cv
28.6511 176.112 28.8711 177.052 28.8711 178.272 cv
28.8711 179.502 28.6511 180.442 28.2211 181.082 cv
27.7811 181.722 27.1611 182.042 26.3511 182.042 cv
25.5311 182.042 24.9011 181.722 24.4711 181.082 cv
24.0411 180.442 23.8311 179.502 23.8311 178.272 cv
23.8311 177.052 24.0411 176.112 24.4711 175.462 cv
24.9011 174.822 25.5311 174.492 26.3511 174.492 cv
f
30.6012 180.672 mo
31.6312 180.672 li
31.6312 181.912 li
30.6012 181.912 li
30.6012 180.672 li
f
35.8911 178.452 mo
35.4211 178.452 35.0511 178.582 34.7811 178.832 cv
34.5111 179.082 34.3811 179.422 34.3811 179.862 cv
34.3811 180.302 34.5111 180.652 34.7811 180.902 cv
35.0511 181.152 35.4211 181.272 35.8911 181.272 cv
36.3511 181.272 36.7211 181.152 36.9911 180.892 cv
37.2611 180.642 37.4011 180.302 37.4011 179.862 cv
37.4011 179.422 37.2611 179.082 37.0011 178.832 cv
36.7311 178.582 36.3611 178.452 35.8911 178.452 cv
34.9011 178.032 mo
34.4811 177.932 34.1511 177.732 33.9111 177.442 cv
33.6711 177.152 33.5611 176.802 33.5611 176.382 cv
33.5611 175.802 33.7611 175.342 34.1811 175.002 cv
34.5911 174.662 35.1611 174.492 35.8911 174.492 cv
36.6111 174.492 37.1811 174.662 37.6011 175.002 cv
38.0111 175.342 38.2211 175.802 38.2211 176.382 cv
38.2211 176.802 38.1011 177.152 37.8611 177.442 cv
37.6211 177.732 37.3011 177.932 36.8811 178.032 cv
37.3511 178.142 37.7211 178.362 37.9911 178.682 cv
38.2511 179.002 38.3911 179.402 38.3911 179.862 cv
38.3911 180.572 38.1711 181.112 37.7411 181.482 cv
37.3011 181.862 36.6911 182.042 35.8911 182.042 cv
35.0811 182.042 34.4611 181.862 34.0311 181.482 cv
33.6011 181.112 33.3911 180.572 33.3911 179.862 cv
33.3911 179.402 33.5211 179.002 33.7911 178.682 cv
34.0511 178.362 34.4211 178.142 34.9011 178.032 cv
34.5411 176.472 mo
34.5411 176.852 34.6511 177.152 34.8911 177.362 cv
35.1311 177.572 35.4611 177.672 35.8911 177.672 cv
36.3111 177.672 36.6411 177.572 36.8811 177.362 cv
37.1211 177.152 37.2411 176.852 37.2411 176.472 cv
37.2411 176.092 37.1211 175.802 36.8811 175.592 cv
36.6411 175.382 36.3111 175.272 35.8911 175.272 cv
35.4611 175.272 35.1311 175.382 34.8911 175.592 cv
34.6511 175.802 34.5411 176.092 34.5411 176.472 cv
f
46.0774 122.675 mo
42.5774 122.675 li
f
46.0774 122.675 mo
42.5774 122.675 li
@
26.3511 119.832 mo
25.8411 119.832 25.4611 120.082 25.2011 120.582 cv
24.9411 121.082 24.8211 121.832 24.8211 122.832 cv
24.8211 123.832 24.9411 124.582 25.2011 125.082 cv
25.4611 125.582 25.8411 125.832 26.3511 125.832 cv
26.8611 125.832 27.2411 125.582 27.5011 125.082 cv
27.7511 124.582 27.8811 123.832 27.8811 122.832 cv
27.8811 121.832 27.7511 121.082 27.5011 120.582 cv
27.2411 120.082 26.8611 119.832 26.3511 119.832 cv
26.3511 119.052 mo
27.1611 119.052 27.7811 119.382 28.2211 120.022 cv
28.6511 120.672 28.8711 121.612 28.8711 122.832 cv
28.8711 124.062 28.6511 125.002 28.2211 125.642 cv
27.7811 126.282 27.1611 126.602 26.3511 126.602 cv
25.5311 126.602 24.9011 126.282 24.4711 125.642 cv
24.0411 125.002 23.8311 124.062 23.8311 122.832 cv
23.8311 121.612 24.0411 120.672 24.4711 120.022 cv
24.9011 119.382 25.5311 119.052 26.3511 119.052 cv
f
30.6012 125.232 mo
31.6312 125.232 li
31.6312 126.472 li
30.6012 126.472 li
30.6012 125.232 li
f
33.8111 126.322 mo
33.8111 125.422 li
34.0511 125.542 34.3011 125.632 34.5611 125.692 cv
34.8111 125.752 35.0611 125.782 35.3111 125.782 cv
35.9511 125.782 36.4511 125.572 36.7911 125.132 cv
37.1311 124.692 37.3311 124.032 37.3911 123.132 cv
37.1911 123.412 36.9511 123.632 36.6711 123.782 cv
36.3811 123.932 36.0611 124.002 35.7111 124.002 cv
34.9711 124.002 34.3911 123.782 33.9711 123.342 cv
33.5511 122.902 33.3411 122.302 33.3411 121.532 cv
33.3411 120.792 33.5611 120.192 34.0011 119.732 cv
34.4411 119.282 35.0311 119.052 35.7711 119.052 cv
36.6111 119.052 37.2611 119.382 37.7011 120.022 cv
38.1411 120.672 38.3711 121.612 38.3711 122.832 cv
38.3711 123.992 38.0911 124.902 37.5511 125.582 cv
37.0011 126.262 36.2711 126.602 35.3511 126.602 cv
35.1011 126.602 34.8511 126.572 34.6011 126.532 cv
34.3411 126.492 34.0811 126.422 33.8111 126.322 cv
35.7711 123.232 mo
36.2111 123.232 36.5611 123.082 36.8211 122.782 cv
37.0811 122.482 37.2111 122.062 37.2111 121.532 cv
37.2111 121.012 37.0811 120.592 36.8211 120.292 cv
36.5611 119.992 36.2111 119.832 35.7711 119.832 cv
35.3311 119.832 34.9811 119.992 34.7211 120.292 cv
34.4611 120.592 34.3311 121.012 34.3311 121.532 cv
34.3311 122.062 34.4611 122.482 34.7211 122.782 cv
34.9811 123.082 35.3311 123.232 35.7711 123.232 cv
f
46.0774 67.235 mo
42.5774 67.235 li
f
46.0774 67.235 mo
42.5774 67.235 li
@
24.4111 70.2019 mo
26.0211 70.2019 li
26.0211 64.6419 li
24.2711 64.9919 li
24.2711 64.0919 li
26.0111 63.7419 li
27.0011 63.7419 li
27.0011 70.2019 li
28.6111 70.2019 li
28.6111 71.0319 li
24.4111 71.0319 li
24.4111 70.2019 li
f
30.6012 69.7919 mo
31.6312 69.7919 li
31.6312 71.0319 li
30.6012 71.0319 li
30.6012 69.7919 li
f
35.8911 64.3919 mo
35.3811 64.3919 35.0011 64.6419 34.7411 65.1419 cv
34.4811 65.6419 34.3611 66.3919 34.3611 67.3919 cv
34.3611 68.3919 34.4811 69.1419 34.7411 69.6419 cv
35.0011 70.1419 35.3811 70.3919 35.8911 70.3919 cv
36.4011 70.3919 36.7811 70.1419 37.0411 69.6419 cv
37.2911 69.1419 37.4211 68.3919 37.4211 67.3919 cv
37.4211 66.3919 37.2911 65.6419 37.0411 65.1419 cv
36.7811 64.6419 36.4011 64.3919 35.8911 64.3919 cv
35.8911 63.6119 mo
36.7011 63.6119 37.3211 63.9419 37.7611 64.5819 cv
38.1911 65.2319 38.4111 66.1719 38.4111 67.3919 cv
38.4111 68.6219 38.1911 69.5619 37.7611 70.2019 cv
37.3211 70.8419 36.7011 71.1619 35.8911 71.1619 cv
35.0711 71.1619 34.4411 70.8419 34.0111 70.2019 cv
33.5811 69.5619 33.3711 68.6219 33.3711 67.3919 cv
33.3711 66.1719 33.5811 65.2319 34.0111 64.5819 cv
34.4411 63.9419 35.0711 63.6119 35.8911 63.6119 cv
f
5.04865 130.655 mo
5.04865 128.975 li
15.9836 126.95 li
15.9836 128.495 li
13.1786 128.945 li
13.1786 133.865 li
15.9836 135.41 li
15.9836 136.955 li
5.04865 130.655 li
6.50364 130.115 mo
11.9486 133.19 li
11.9486 129.17 li
6.50364 130.115 li
f
8.09364 117.874 mo
9.42864 118.144 li
9.20364 118.474 9.02364 118.819 8.90364 119.179 cv
8.78365 119.539 8.72364 119.914 8.72364 120.304 cv
8.72364 120.739 8.79865 121.144 8.94864 121.534 cv
9.09864 121.924 9.32364 122.254 9.59364 122.509 cv
10.0286 122.929 10.5236 123.259 11.0936 123.484 cv
11.6636 123.724 12.2636 123.829 12.8636 123.829 cv
13.6136 123.829 14.1536 123.649 14.5136 123.274 cv
14.8736 122.914 15.0536 122.344 15.0536 121.594 cv
15.0536 121.234 15.0086 120.829 14.8886 120.409 cv
14.7836 119.989 14.6186 119.554 14.3786 119.104 cv
15.7136 119.359 li
15.8786 119.749 15.9836 120.154 16.0586 120.574 cv
16.1336 120.994 16.1786 121.414 16.1786 121.834 cv
16.1786 122.929 15.9086 123.769 15.3686 124.354 cv
14.8286 124.939 14.0636 125.224 13.0436 125.224 cv
12.2036 125.224 11.4236 125.074 10.7036 124.774 cv
9.98364 124.474 9.33864 124.009 8.76865 123.409 cv
8.37864 123.004 8.09364 122.524 7.88364 121.969 cv
7.68864 121.429 7.58364 120.814 7.58364 120.154 cv
7.58364 119.779 7.62864 119.404 7.71864 119.029 cv
7.80864 118.654 7.92864 118.264 8.09364 117.874 cv
f
8.09364 109.627 mo
9.42864 109.897 li
9.20364 110.227 9.02364 110.572 8.90364 110.932 cv
8.78365 111.292 8.72364 111.667 8.72364 112.057 cv
8.72364 112.492 8.79865 112.897 8.94864 113.287 cv
9.09864 113.677 9.32364 114.007 9.59364 114.262 cv
10.0286 114.682 10.5236 115.012 11.0936 115.237 cv
11.6636 115.477 12.2636 115.582 12.8636 115.582 cv
13.6136 115.582 14.1536 115.402 14.5136 115.027 cv
14.8736 114.667 15.0536 114.097 15.0536 113.347 cv
15.0536 112.987 15.0086 112.582 14.8886 112.162 cv
14.7836 111.742 14.6186 111.307 14.3786 110.857 cv
15.7136 111.112 li
15.8786 111.502 15.9836 111.907 16.0586 112.327 cv
16.1336 112.747 16.1786 113.167 16.1786 113.587 cv
16.1786 114.682 15.9086 115.522 15.3686 116.107 cv
14.8286 116.692 14.0636 116.977 13.0436 116.977 cv
12.2036 116.977 11.4236 116.827 10.7036 116.527 cv
9.98364 116.227 9.33864 115.762 8.76865 115.162 cv
8.37864 114.757 8.09364 114.277 7.88364 113.722 cv
7.68864 113.182 7.58364 112.567 7.58364 111.907 cv
7.58364 111.532 7.62864 111.157 7.71864 110.782 cv
7.80864 110.407 7.92864 110.017 8.09364 109.627 cv
f
2.5 lw
2 lc
66.8031 67.235 mo
108.255 77.7686 li
149.706 75.551 li
191.157 67.235 li
232.609 102.162 li
274.06 67.235 li
315.512 117.131 li
356.963 107.706 li
398.415 72.779 li
439.866 67.235 li
481.317 67.235 li
522.769 67.235 li
564.22 67.235 li
605.672 78.323 li
647.123 67.235 li
688.575 117.131 li
730.026 67.235 li
/1 
[/DeviceCMYK] /CSA add_res
.658137 .0621042 0 0 cmyk
@
gsave
61.3032 72.7351 mo
72.3032 72.7351 li
72.3032 61.735 li
61.3032 61.735 li
61.3032 72.7351 li
clp
61.8031 72.235 mo
71.8031 72.235 li
71.8031 62.235 li
61.8031 62.235 li
cp
f
1 lw
0 lc
0 lj
61.8031 72.235 mo
71.8031 72.235 li
71.8031 62.235 li
61.8031 62.235 li
cp
@
grestore
gsave
102.754 83.2686 mo
113.755 83.2686 li
113.755 72.2685 li
102.754 72.2685 li
102.754 83.2686 li
clp
103.255 82.7686 mo
113.255 82.7686 li
113.255 72.7686 li
103.255 72.7686 li
cp
f
1 lw
0 lc
0 lj
103.255 82.7686 mo
113.255 82.7686 li
113.255 72.7686 li
103.255 72.7686 li
cp
@
grestore
gsave
144.206 81.051 mo
155.206 81.051 li
155.206 70.0509 li
144.206 70.0509 li
144.206 81.051 li
clp
144.706 80.551 mo
154.706 80.551 li
154.706 70.551 li
144.706 70.551 li
cp
f
1 lw
0 lc
0 lj
144.706 80.551 mo
154.706 80.551 li
154.706 70.551 li
144.706 70.551 li
cp
@
grestore
gsave
185.657 72.7351 mo
196.657 72.7351 li
196.657 61.735 li
185.657 61.735 li
185.657 72.7351 li
clp
186.157 72.235 mo
196.157 72.235 li
196.157 62.235 li
186.157 62.235 li
cp
f
1 lw
0 lc
0 lj
186.157 72.235 mo
196.157 72.235 li
196.157 62.235 li
186.157 62.235 li
cp
@
grestore
gsave
227.109 107.662 mo
238.109 107.662 li
238.109 96.6622 li
227.109 96.6622 li
227.109 107.662 li
clp
227.609 107.162 mo
237.609 107.162 li
237.609 97.1622 li
227.609 97.1622 li
cp
f
1 lw
0 lc
0 lj
227.609 107.162 mo
237.609 107.162 li
237.609 97.1622 li
227.609 97.1622 li
cp
@
grestore
gsave
268.56 72.7351 mo
279.56 72.7351 li
279.56 61.735 li
268.56 61.735 li
268.56 72.7351 li
clp
269.06 72.235 mo
279.06 72.235 li
279.06 62.235 li
269.06 62.235 li
cp
f
1 lw
0 lc
0 lj
269.06 72.235 mo
279.06 72.235 li
279.06 62.235 li
269.06 62.235 li
cp
@
grestore
gsave
310.012 122.631 mo
321.012 122.631 li
321.012 111.631 li
310.012 111.631 li
310.012 122.631 li
clp
310.512 122.131 mo
320.512 122.131 li
320.512 112.131 li
310.512 112.131 li
cp
f
1 lw
0 lc
0 lj
310.512 122.131 mo
320.512 122.131 li
320.512 112.131 li
310.512 112.131 li
cp
@
grestore
gsave
351.463 113.206 mo
362.463 113.206 li
362.463 102.206 li
351.463 102.206 li
351.463 113.206 li
clp
351.963 112.706 mo
361.963 112.706 li
361.963 102.706 li
351.963 102.706 li
cp
f
1 lw
0 lc
0 lj
351.963 112.706 mo
361.963 112.706 li
361.963 102.706 li
351.963 102.706 li
cp
@
grestore
gsave
392.914 78.279 mo
403.914 78.279 li
403.914 67.279 li
392.914 67.279 li
392.914 78.279 li
clp
393.414 77.779 mo
403.414 77.779 li
403.414 67.779 li
393.414 67.779 li
cp
f
1 lw
0 lc
0 lj
393.414 77.779 mo
403.414 77.779 li
403.414 67.779 li
393.414 67.779 li
cp
@
grestore
gsave
434.366 72.7351 mo
445.366 72.7351 li
445.366 61.735 li
434.366 61.735 li
434.366 72.7351 li
clp
434.866 72.235 mo
444.866 72.235 li
444.866 62.235 li
434.866 62.235 li
cp
f
1 lw
0 lc
0 lj
434.866 72.235 mo
444.866 72.235 li
444.866 62.235 li
434.866 62.235 li
cp
@
grestore
gsave
475.817 72.7351 mo
486.817 72.7351 li
486.817 61.735 li
475.817 61.735 li
475.817 72.7351 li
clp
476.317 72.235 mo
486.317 72.235 li
486.317 62.235 li
476.317 62.235 li
cp
f
1 lw
0 lc
0 lj
476.317 72.235 mo
486.317 72.235 li
486.317 62.235 li
476.317 62.235 li
cp
@
grestore
gsave
517.269 72.7351 mo
528.269 72.7351 li
528.269 61.735 li
517.269 61.735 li
517.269 72.7351 li
clp
517.769 72.235 mo
527.769 72.235 li
527.769 62.235 li
517.769 62.235 li
cp
f
1 lw
0 lc
0 lj
517.769 72.235 mo
527.769 72.235 li
527.769 62.235 li
517.769 62.235 li
cp
@
grestore
gsave
558.72 72.7351 mo
569.72 72.7351 li
569.72 61.735 li
558.72 61.735 li
558.72 72.7351 li
clp
559.22 72.235 mo
569.22 72.235 li
569.22 62.235 li
559.22 62.235 li
cp
f
1 lw
0 lc
0 lj
559.22 72.235 mo
569.22 72.235 li
569.22 62.235 li
559.22 62.235 li
cp
@
grestore
gsave
600.172 83.823 mo
611.172 83.823 li
611.172 72.8229 li
600.172 72.8229 li
600.172 83.823 li
clp
600.672 83.323 mo
610.672 83.323 li
610.672 73.323 li
600.672 73.323 li
cp
f
1 lw
0 lc
0 lj
600.672 83.323 mo
610.672 83.323 li
610.672 73.323 li
600.672 73.323 li
cp
@
grestore
gsave
641.623 72.7351 mo
652.623 72.7351 li
652.623 61.735 li
641.623 61.735 li
641.623 72.7351 li
clp
642.123 72.235 mo
652.123 72.235 li
652.123 62.235 li
642.123 62.235 li
cp
f
1 lw
0 lc
0 lj
642.123 72.235 mo
652.123 72.235 li
652.123 62.235 li
642.123 62.235 li
cp
@
grestore
gsave
683.074 122.631 mo
694.074 122.631 li
694.074 111.631 li
683.074 111.631 li
683.074 122.631 li
clp
683.574 122.131 mo
693.574 122.131 li
693.574 112.131 li
683.574 112.131 li
cp
f
1 lw
0 lc
0 lj
683.574 122.131 mo
693.574 122.131 li
693.574 112.131 li
683.574 112.131 li
cp
@
grestore
gsave
724.526 72.7351 mo
735.526 72.7351 li
735.526 61.735 li
724.526 61.735 li
724.526 72.7351 li
clp
725.026 72.235 mo
735.026 72.235 li
735.026 62.235 li
725.026 62.235 li
cp
f
1 lw
0 lc
0 lj
725.026 72.235 mo
735.026 72.235 li
735.026 62.235 li
725.026 62.235 li
cp
@
grestore
2 lw
66.8031 67.235 mo
108.255 94.955 li
149.706 122.675 li
191.157 67.235 li
232.609 150.395 li
274.06 67.235 li
315.512 205.835 li
356.963 178.115 li
398.415 133.763 li
439.866 150.395 li
481.317 67.235 li
522.769 67.235 li
564.22 83.867 li
605.672 94.955 li
647.123 67.235 li
688.575 172.571 li
730.026 150.395 li
.65478 0 1 0 cmyk
@
gsave
62.0605 74.806 mo
71.5457 74.806 li
71.5457 59.6639 li
62.0605 59.6639 li
62.0605 74.806 li
clp
66.8031 74.3061 mo
71.0457 67.235 li
66.8031 60.1639 li
62.5605 67.235 li
cp
f
1 lw
0 lc
0 lj
66.8031 74.3061 mo
71.0457 67.235 li
66.8031 60.1639 li
62.5605 67.235 li
cp
@
grestore
gsave
103.512 102.526 mo
112.997 102.526 li
112.997 87.3839 li
103.512 87.3839 li
103.512 102.526 li
clp
108.255 102.026 mo
112.497 94.955 li
108.255 87.8839 li
104.012 94.955 li
cp
f
1 lw
0 lc
0 lj
108.255 102.026 mo
112.497 94.955 li
108.255 87.8839 li
104.012 94.955 li
cp
@
grestore
gsave
144.963 130.246 mo
154.449 130.246 li
154.449 115.104 li
144.963 115.104 li
144.963 130.246 li
clp
149.706 129.746 mo
153.949 122.675 li
149.706 115.604 li
145.463 122.675 li
cp
f
1 lw
0 lc
0 lj
149.706 129.746 mo
153.949 122.675 li
149.706 115.604 li
145.463 122.675 li
cp
@
grestore
gsave
186.415 74.806 mo
195.9 74.806 li
195.9 59.6639 li
186.415 59.6639 li
186.415 74.806 li
clp
191.157 74.3061 mo
195.4 67.235 li
191.157 60.1639 li
186.915 67.235 li
cp
f
1 lw
0 lc
0 lj
191.157 74.3061 mo
195.4 67.235 li
191.157 60.1639 li
186.915 67.235 li
cp
@
grestore
gsave
227.866 157.966 mo
237.352 157.966 li
237.352 142.824 li
227.866 142.824 li
227.866 157.966 li
clp
232.609 157.466 mo
236.851 150.395 li
232.609 143.324 li
228.366 150.395 li
cp
f
1 lw
0 lc
0 lj
232.609 157.466 mo
236.851 150.395 li
232.609 143.324 li
228.366 150.395 li
cp
@
grestore
gsave
269.318 74.806 mo
278.803 74.806 li
278.803 59.6639 li
269.318 59.6639 li
269.318 74.806 li
clp
274.06 74.3061 mo
278.303 67.235 li
274.06 60.1639 li
269.818 67.235 li
cp
f
1 lw
0 lc
0 lj
274.06 74.3061 mo
278.303 67.235 li
274.06 60.1639 li
269.818 67.235 li
cp
@
grestore
gsave
310.769 213.406 mo
320.254 213.406 li
320.254 198.264 li
310.769 198.264 li
310.769 213.406 li
clp
315.512 212.906 mo
319.754 205.835 li
315.512 198.764 li
311.269 205.835 li
cp
f
1 lw
0 lc
0 lj
315.512 212.906 mo
319.754 205.835 li
315.512 198.764 li
311.269 205.835 li
cp
@
grestore
gsave
352.22 185.686 mo
361.706 185.686 li
361.706 170.544 li
352.22 170.544 li
352.22 185.686 li
clp
356.963 185.186 mo
361.206 178.115 li
356.963 171.044 li
352.72 178.115 li
cp
f
1 lw
0 lc
0 lj
356.963 185.186 mo
361.206 178.115 li
356.963 171.044 li
352.72 178.115 li
cp
@
grestore
gsave
393.672 141.334 mo
403.157 141.334 li
403.157 126.192 li
393.672 126.192 li
393.672 141.334 li
clp
398.414 140.834 mo
402.657 133.763 li
398.414 126.692 li
394.172 133.763 li
cp
f
1 lw
0 lc
0 lj
398.414 140.834 mo
402.657 133.763 li
398.414 126.692 li
394.172 133.763 li
cp
@
grestore
gsave
435.123 157.966 mo
444.608 157.966 li
444.608 142.824 li
435.123 142.824 li
435.123 157.966 li
clp
439.866 157.466 mo
444.109 150.395 li
439.866 143.324 li
435.623 150.395 li
cp
f
1 lw
0 lc
0 lj
439.866 157.466 mo
444.109 150.395 li
439.866 143.324 li
435.623 150.395 li
cp
@
grestore
gsave
476.575 74.806 mo
486.06 74.806 li
486.06 59.6639 li
476.575 59.6639 li
476.575 74.806 li
clp
481.317 74.3061 mo
485.56 67.235 li
481.317 60.1639 li
477.075 67.235 li
cp
f
1 lw
0 lc
0 lj
481.317 74.3061 mo
485.56 67.235 li
481.317 60.1639 li
477.075 67.235 li
cp
@
grestore
gsave
518.026 74.806 mo
527.511 74.806 li
527.511 59.6639 li
518.026 59.6639 li
518.026 74.806 li
clp
522.769 74.3061 mo
527.011 67.235 li
522.769 60.1639 li
518.526 67.235 li
cp
f
1 lw
0 lc
0 lj
522.769 74.3061 mo
527.011 67.235 li
522.769 60.1639 li
518.526 67.235 li
cp
@
grestore
gsave
559.478 91.4381 mo
568.963 91.4381 li
568.963 76.296 li
559.478 76.296 li
559.478 91.4381 li
clp
564.22 90.9381 mo
568.463 83.867 li
564.22 76.7959 li
559.978 83.867 li
cp
f
1 lw
0 lc
0 lj
564.22 90.9381 mo
568.463 83.867 li
564.22 76.7959 li
559.978 83.867 li
cp
@
grestore
gsave
600.929 102.526 mo
610.414 102.526 li
610.414 87.3839 li
600.929 87.3839 li
600.929 102.526 li
clp
605.672 102.026 mo
609.914 94.955 li
605.672 87.8839 li
601.429 94.955 li
cp
f
1 lw
0 lc
0 lj
605.672 102.026 mo
609.914 94.955 li
605.672 87.8839 li
601.429 94.955 li
cp
@
grestore
gsave
642.38 74.806 mo
651.866 74.806 li
651.866 59.6639 li
642.38 59.6639 li
642.38 74.806 li
clp
647.123 74.3061 mo
651.366 67.235 li
647.123 60.1639 li
642.88 67.235 li
cp
f
1 lw
0 lc
0 lj
647.123 74.3061 mo
651.366 67.235 li
647.123 60.1639 li
642.88 67.235 li
cp
@
grestore
gsave
683.832 180.142 mo
693.317 180.142 li
693.317 165 li
683.832 165 li
683.832 180.142 li
clp
688.574 179.642 mo
692.817 172.571 li
688.574 165.5 li
684.332 172.571 li
cp
f
1 lw
0 lc
0 lj
688.574 179.642 mo
692.817 172.571 li
688.574 165.5 li
684.332 172.571 li
cp
@
grestore
gsave
725.283 157.966 mo
734.768 157.966 li
734.768 142.824 li
725.283 142.824 li
725.283 157.966 li
clp
730.026 157.466 mo
734.268 150.395 li
730.026 143.324 li
725.783 150.395 li
cp
f
1 lw
0 lc
0 lj
730.026 157.466 mo
734.268 150.395 li
730.026 143.324 li
725.783 150.395 li
cp
@
grestore
.8 lw
0 lj
46.0774 233.555 mo
46.0774 11.795 li
1 /0 /CSD get_res sepcs
1 sep
@
771.477 233.555 mo
771.477 11.795 li
@
46.0774 233.555 mo
771.477 233.555 li
@
46.0774 11.795 mo
771.477 11.795 li
@
764.477 48.6388 mo
697.087 48.6388 li
696.497 48.6369 696.15 48.4946 695.94 48.2852 cv
695.731 48.0759 695.589 47.7287 695.587 47.1387 cv
695.587 18.7949 li
695.589 18.2051 695.731 17.8576 695.94 17.6486 cv
696.15 17.4391 696.497 17.2969 697.087 17.295 cv
764.477 17.295 li
765.067 17.2969 765.415 17.4391 765.624 17.6486 cv
765.833 17.8576 765.976 18.2051 765.977 18.7949 cv
765.977 47.1387 li
765.976 47.7287 765.833 48.0759 765.624 48.2852 cv
765.415 48.4946 765.067 48.6369 764.477 48.6388 cv
0 0 0 0 cmyk
f
764.487 49.6388 mo
764.484 49.6388 764.481 49.6388 764.477 49.6388 cv
697.087 49.6388 li
697.084 49.6388 697.08 49.6388 697.077 49.6388 cv
696.338 49.6388 695.689 49.4476 695.233 48.9923 cv
694.776 48.5347 694.585 47.8821 694.587 47.1387 cv
694.587 18.7949 li
694.585 18.0516 694.776 17.399 695.233 16.9414 cv
695.689 16.4862 696.338 16.2949 697.077 16.2949 cv
697.081 16.2949 697.084 16.2949 697.087 16.2949 cv
764.477 16.2949 li
764.48 16.2949 764.484 16.2949 764.487 16.2949 cv
765.226 16.2949 765.875 16.4862 766.331 16.9414 cv
766.788 17.399 766.979 18.0516 766.977 18.7949 cv
766.977 47.1387 li
766.979 47.8821 766.788 48.5347 766.331 48.9923 cv
765.875 49.4475 765.226 49.6388 764.487 49.6388 cv
697.087 48.6388 mo
764.477 48.6388 li
765.067 48.6369 765.415 48.4946 765.624 48.2852 cv
765.833 48.0759 765.976 47.7287 765.977 47.1387 cv
765.977 18.7949 li
765.976 18.2051 765.833 17.8576 765.624 17.6486 cv
765.415 17.4391 765.067 17.2969 764.477 17.295 cv
697.087 17.295 li
696.497 17.2969 696.15 17.4391 695.94 17.6486 cv
695.731 17.8576 695.589 18.2051 695.587 18.7949 cv
695.587 47.1387 li
695.589 47.7287 695.731 48.0759 695.94 48.2852 cv
696.15 48.4946 696.497 48.6369 697.087 48.6388 cv
697.087 48.6388 li
.159121 .120455 .125338 0 cmyk
f
2.5 lw
1 lj
699.087 24.8887 mo
719.087 24.8887 li
.658137 .0621042 0 0 cmyk
@
704.087 29.8887 mo
714.087 29.8887 li
714.087 19.8887 li
704.087 19.8887 li
cp
f
1 lw
0 lc
0 lj
704.087 29.8887 mo
714.087 29.8887 li
714.087 19.8887 li
704.087 19.8887 li
cp
@
728.067 21.0987 mo
729.537 21.0987 li
731.397 26.0587 li
733.267 21.0987 li
734.737 21.0987 li
734.737 28.3887 li
733.777 28.3887 li
733.777 21.9887 li
731.897 26.9887 li
730.907 26.9887 li
729.027 21.9887 li
729.027 28.3887 li
728.067 28.3887 li
728.067 21.0987 li
1 /0 /CSD get_res sepcs
1 sep
f
741.667 27.3487 mo
741.667 25.3887 li
740.057 25.3887 li
740.057 24.5787 li
742.647 24.5787 li
742.647 27.7087 li
742.267 27.9887 741.847 28.1887 741.387 28.3187 cv
740.927 28.4487 740.437 28.5187 739.917 28.5187 cv
738.777 28.5187 737.877 28.1887 737.237 27.5287 cv
736.597 26.8687 736.277 25.9387 736.277 24.7487 cv
736.277 23.5687 736.597 22.6387 737.237 21.9687 cv
737.877 21.3087 738.777 20.9687 739.917 20.9687 cv
740.387 20.9687 740.837 21.0287 741.267 21.1487 cv
741.697 21.2687 742.097 21.4387 742.457 21.6587 cv
742.457 22.7087 li
742.087 22.4087 741.697 22.1787 741.287 22.0187 cv
740.877 21.8587 740.447 21.7787 739.997 21.7787 cv
739.097 21.7787 738.427 22.0287 737.987 22.5287 cv
737.537 23.0287 737.317 23.7687 737.317 24.7487 cv
737.317 25.7387 737.537 26.4787 737.987 26.9787 cv
738.427 27.4787 739.097 27.7187 739.997 27.7187 cv
740.337 27.7187 740.647 27.6887 740.927 27.6287 cv
741.207 27.5687 741.447 27.4787 741.667 27.3487 cv
f
747.907 24.9687 mo
748.117 25.0487 748.327 25.1987 748.527 25.4287 cv
748.727 25.6687 748.927 25.9887 749.127 26.3987 cv
750.127 28.3887 li
749.067 28.3887 li
748.137 26.5187 li
747.897 26.0387 747.657 25.7087 747.437 25.5487 cv
747.207 25.3887 746.897 25.3087 746.507 25.3087 cv
745.437 25.3087 li
745.437 28.3887 li
744.447 28.3887 li
744.447 21.0987 li
746.677 21.0987 li
747.507 21.0987 748.127 21.2787 748.537 21.6187 cv
748.947 21.9687 749.157 22.4987 749.157 23.1987 cv
749.157 23.6587 749.047 24.0487 748.837 24.3487 cv
748.617 24.6487 748.307 24.8587 747.907 24.9687 cv
745.437 21.9087 mo
745.437 24.4987 li
746.677 24.4987 li
747.147 24.4987 747.507 24.3887 747.747 24.1687 cv
747.987 23.9487 748.117 23.6287 748.117 23.1987 cv
748.117 22.7787 747.987 22.4587 747.747 22.2387 cv
747.507 22.0187 747.147 21.9087 746.677 21.9087 cv
745.437 21.9087 li
f
751.397 21.0987 mo
755.587 21.0987 li
755.587 21.9287 li
752.387 21.9287 li
752.387 24.0787 li
755.277 24.0787 li
755.277 24.9087 li
752.387 24.9087 li
752.387 28.3887 li
751.397 28.3887 li
751.397 21.0987 li
f
757.147 21.0987 mo
761.757 21.0987 li
761.757 21.9287 li
758.137 21.9287 li
758.137 24.0887 li
761.607 24.0887 li
761.607 24.9187 li
758.137 24.9187 li
758.137 27.5587 li
761.847 27.5587 li
761.847 28.3887 li
757.147 28.3887 li
757.147 21.0987 li
f
2 lw
2 lc
1 lj
699.087 39.5606 mo
719.087 39.5606 li
.65478 0 1 0 cmyk
@
709.087 46.6317 mo
713.329 39.5606 li
709.087 32.4895 li
704.844 39.5606 li
cp
f
1 lw
0 lc
0 lj
709.087 46.6317 mo
713.329 39.5606 li
709.087 32.4895 li
704.844 39.5606 li
cp
@
728.067 35.7706 mo
729.537 35.7706 li
731.397 40.7306 li
733.267 35.7706 li
734.737 35.7706 li
734.737 43.0606 li
733.777 43.0606 li
733.777 36.6606 li
731.897 41.6606 li
730.907 41.6606 li
729.027 36.6606 li
729.027 43.0606 li
728.067 43.0606 li
728.067 35.7706 li
1 /0 /CSD get_res sepcs
1 sep
f
740.597 37.8006 mo
740.597 38.6406 li
740.337 38.5006 740.087 38.4006 739.827 38.3306 cv
739.567 38.2606 739.317 38.2206 739.057 38.2206 cv
738.477 38.2206 738.017 38.4106 737.697 38.7806 cv
737.377 39.1506 737.217 39.6706 737.217 40.3306 cv
737.217 41.0006 737.377 41.5206 737.697 41.8906 cv
738.017 42.2606 738.477 42.4406 739.057 42.4406 cv
739.317 42.4406 739.567 42.4106 739.827 42.3406 cv
740.087 42.2706 740.337 42.1606 740.597 42.0206 cv
740.597 42.8506 li
740.337 42.9706 740.077 43.0606 739.817 43.1106 cv
739.547 43.1606 739.257 43.1906 738.957 43.1906 cv
738.137 43.1906 737.477 42.9406 736.997 42.4206 cv
736.507 41.9106 736.267 41.2106 736.267 40.3306 cv
736.267 39.4406 736.507 38.7406 736.997 38.2306 cv
737.487 37.7206 738.157 37.4606 739.017 37.4606 cv
739.297 37.4606 739.567 37.4906 739.827 37.5506 cv
740.087 37.6106 740.347 37.6906 740.597 37.8006 cv
f
741.197 35.7706 mo
747.357 35.7706 li
747.357 36.6006 li
744.767 36.6006 li
744.767 43.0606 li
743.777 43.0606 li
743.777 36.6006 li
741.197 36.6006 li
741.197 35.7706 li
f
747.747 37.5906 mo
748.647 37.5906 li
749.767 41.8606 li
750.887 37.5906 li
751.947 37.5906 li
753.067 41.8606 li
754.187 37.5906 li
755.087 37.5906 li
753.657 43.0606 li
752.597 43.0606 li
751.417 38.5806 li
750.237 43.0606 li
749.177 43.0606 li
747.747 37.5906 li
f
758.567 38.2206 mo
758.087 38.2206 757.707 38.4106 757.427 38.7906 cv
757.147 39.1706 757.007 39.6806 757.007 40.3306 cv
757.007 40.9906 757.137 41.5006 757.417 41.8806 cv
757.697 42.2606 758.077 42.4406 758.567 42.4406 cv
759.047 42.4406 759.427 42.2606 759.707 41.8806 cv
759.987 41.5006 760.127 40.9906 760.127 40.3306 cv
760.127 39.6906 759.987 39.1706 759.707 38.7906 cv
759.427 38.4106 759.047 38.2206 758.567 38.2206 cv
758.567 37.4606 mo
759.347 37.4606 759.957 37.7206 760.407 38.2206 cv
760.847 38.7306 761.077 39.4306 761.077 40.3306 cv
761.077 41.2306 760.847 41.9306 760.407 42.4306 cv
759.957 42.9406 759.347 43.1906 758.567 43.1906 cv
757.777 43.1906 757.157 42.9406 756.717 42.4306 cv
756.277 41.9306 756.057 41.2306 756.057 40.3306 cv
756.057 39.4306 756.277 38.7306 756.717 38.2206 cv
757.157 37.7206 757.777 37.4606 758.567 37.4606 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
