%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: CV1.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: admin
%%CreationDate: 2019/6/4, 16:26:51
%%BoundingBox: 0 0 834 259
%%HiResBoundingBox: 0 0 833.2095 258.1915
%%CropBox: 0 0 833.2095 258.1915
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 842 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-07-10T10:33:07+08:00"
   xmp:CreatorTool="matplotlib 2.0.0, http://matplotlib.org"
   xmp:ModifyDate="2019-05-28T00:14:20+08:00"
   xmp:MetadataDate="2019-05-28T00:14:20+08:00"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:0a784999-5f41-4104-8a30-a4b8ada67d95"
   xmpMM:InstanceID="uuid:1ae65fb0-754b-48e0-a76c-080c54609191"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -258.191 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 258.191 li
833.209 258.191 li
833.209 0 li
cp
clp
gsave
-.891602 258.313 mo
834.108 258.313 li
834.108 -.687012 li
-.891602 -.687012 li
cp
clp
-82.8916 272.313 mo
925.108 272.313 li
925.108 -15.687 li
-82.8916 -15.687 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
43.1084 240.633 mo
824.308 240.633 li
824.308 18.873 li
43.1084 18.873 li
cp
f
66.0849 240.633 mo
66.0849 244.133 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
66.0849 240.633 mo
66.0849 244.133 li
@
51.7033 248.747 mo
51.7033 254.417 li
52.8933 254.417 li
53.8933 254.417 54.6333 254.197 55.1033 253.737 cv
55.5633 253.277 55.8033 252.557 55.8033 251.577 cv
55.8033 250.597 55.5633 249.887 55.1033 249.427 cv
54.6333 248.977 53.8933 248.747 52.8933 248.747 cv
51.7033 248.747 li
50.7133 247.937 mo
52.7433 247.937 li
54.1533 247.937 55.1933 248.237 55.8533 248.817 cv
56.5133 249.407 56.8433 250.327 56.8433 251.577 cv
56.8433 252.837 56.5033 253.757 55.8433 254.347 cv
55.1833 254.937 54.1433 255.227 52.7433 255.227 cv
50.7133 255.227 li
50.7133 247.937 li
f
58.4133 247.937 mo
59.4034 247.937 li
59.4034 254.397 li
62.9534 254.397 li
62.9534 255.227 li
58.4133 255.227 li
58.4133 247.937 li
f
64.9734 251.747 mo
64.9734 254.417 li
66.5534 254.417 li
67.0834 254.417 67.4734 254.307 67.7334 254.087 cv
67.9834 253.867 68.1134 253.537 68.1134 253.077 cv
68.1134 252.627 67.9834 252.297 67.7334 252.077 cv
67.4734 251.857 67.0834 251.747 66.5534 251.747 cv
64.9734 251.747 li
64.9734 248.747 mo
64.9734 250.947 li
66.4334 250.947 li
66.9134 250.947 67.2634 250.857 67.5034 250.677 cv
67.7434 250.497 67.8634 250.227 67.8634 249.847 cv
67.8634 249.487 67.7434 249.207 67.5034 249.027 cv
67.2634 248.847 66.9134 248.747 66.4334 248.747 cv
64.9734 248.747 li
63.9834 247.937 mo
66.5034 247.937 li
67.2534 247.937 67.8334 248.097 68.2434 248.407 cv
68.6434 248.727 68.8534 249.167 68.8534 249.737 cv
68.8534 250.187 68.7434 250.547 68.5334 250.807 cv
68.3234 251.067 68.0234 251.237 67.6234 251.297 cv
68.1034 251.407 68.4834 251.627 68.7534 251.957 cv
69.0134 252.287 69.1534 252.697 69.1534 253.187 cv
69.1534 253.847 68.9234 254.347 68.4834 254.697 cv
68.0434 255.057 67.4134 255.227 66.6034 255.227 cv
63.9834 255.227 li
63.9834 247.937 li
f
76.3035 248.497 mo
76.3035 249.537 li
75.9635 249.237 75.6135 249.007 75.2335 248.847 cv
74.8535 248.697 74.4635 248.617 74.0435 248.617 cv
73.2035 248.617 72.5635 248.877 72.1235 249.387 cv
71.6835 249.897 71.4635 250.627 71.4635 251.587 cv
71.4635 252.547 71.6835 253.287 72.1235 253.797 cv
72.5635 254.307 73.2035 254.557 74.0435 254.557 cv
74.4635 254.557 74.8535 254.487 75.2335 254.327 cv
75.6135 254.177 75.9635 253.947 76.3035 253.637 cv
76.3035 254.667 li
75.9535 254.907 75.5835 255.077 75.2035 255.187 cv
74.8235 255.297 74.4135 255.357 73.9835 255.357 cv
72.8835 255.357 72.0135 255.027 71.3735 254.357 cv
70.7335 253.687 70.4235 252.767 70.4235 251.587 cv
70.4235 250.417 70.7335 249.497 71.3735 248.817 cv
72.0135 248.147 72.8835 247.807 73.9835 247.807 cv
74.4235 247.807 74.8335 247.867 75.2135 247.977 cv
75.5935 248.097 75.9635 248.267 76.3035 248.497 cv
f
77.8234 247.937 mo
78.8134 247.937 li
78.8134 254.397 li
82.3634 254.397 li
82.3634 255.227 li
77.8234 255.227 li
77.8234 247.937 li
f
112.038 240.633 mo
112.038 244.133 li
f
112.038 240.633 mo
112.038 244.133 li
@
103.266 248.747 mo
103.266 251.487 li
104.506 251.487 li
104.966 251.487 105.316 251.377 105.566 251.137 cv
105.816 250.897 105.946 250.557 105.946 250.117 cv
105.946 249.677 105.816 249.347 105.566 249.107 cv
105.316 248.867 104.966 248.747 104.506 248.747 cv
103.266 248.747 li
102.276 247.937 mo
104.506 247.937 li
105.316 247.937 105.936 248.127 106.356 248.497 cv
106.776 248.867 106.986 249.407 106.986 250.117 cv
106.986 250.837 106.776 251.387 106.356 251.747 cv
105.936 252.117 105.316 252.297 104.506 252.297 cv
103.266 252.297 li
103.266 255.227 li
102.276 255.227 li
102.276 247.937 li
f
111.436 250.597 mo
111.336 250.537 111.226 250.497 111.106 250.467 cv
110.986 250.447 110.856 250.427 110.716 250.427 cv
110.206 250.427 109.816 250.597 109.546 250.927 cv
109.266 251.257 109.136 251.727 109.136 252.347 cv
109.136 255.227 li
108.236 255.227 li
108.236 249.757 li
109.136 249.757 li
109.136 250.607 li
109.316 250.277 109.566 250.027 109.866 249.867 cv
110.166 249.707 110.536 249.627 110.976 249.627 cv
111.186 249.637 li
111.256 249.647 111.336 249.657 111.436 249.677 cv
111.436 250.597 li
f
114.496 250.387 mo
114.016 250.387 113.636 250.577 113.356 250.957 cv
113.076 251.337 112.936 251.847 112.936 252.497 cv
112.936 253.157 113.066 253.667 113.346 254.047 cv
113.626 254.427 114.006 254.607 114.496 254.607 cv
114.976 254.607 115.356 254.427 115.636 254.047 cv
115.916 253.667 116.056 253.157 116.056 252.497 cv
116.056 251.857 115.916 251.337 115.636 250.957 cv
115.356 250.577 114.976 250.387 114.496 250.387 cv
114.496 249.627 mo
115.276 249.627 115.886 249.887 116.336 250.387 cv
116.776 250.897 117.006 251.597 117.006 252.497 cv
117.006 253.397 116.776 254.097 116.336 254.597 cv
115.886 255.107 115.276 255.357 114.496 255.357 cv
113.706 255.357 113.086 255.107 112.646 254.597 cv
112.206 254.097 111.986 253.397 111.986 252.497 cv
111.986 251.597 112.206 250.897 112.646 250.387 cv
113.086 249.887 113.706 249.627 114.496 249.627 cv
f
121.986 249.917 mo
121.986 250.767 li
121.726 250.647 121.466 250.547 121.196 250.477 cv
120.916 250.417 120.636 250.377 120.346 250.377 cv
119.896 250.377 119.556 250.447 119.336 250.587 cv
119.116 250.727 119.006 250.927 119.006 251.197 cv
119.006 251.407 119.086 251.567 119.246 251.687 cv
119.406 251.807 119.726 251.927 120.206 252.027 cv
120.516 252.097 li
121.156 252.237 121.606 252.437 121.876 252.677 cv
122.136 252.927 122.276 253.277 122.276 253.717 cv
122.276 254.227 122.076 254.627 121.676 254.917 cv
121.276 255.217 120.716 255.357 120.016 255.357 cv
119.716 255.357 119.416 255.327 119.096 255.277 cv
118.776 255.227 118.446 255.147 118.096 255.027 cv
118.096 254.097 li
118.426 254.277 118.756 254.407 119.076 254.487 cv
119.396 254.577 119.716 254.617 120.036 254.617 cv
120.456 254.617 120.786 254.547 121.016 254.407 cv
121.236 254.267 121.356 254.057 121.356 253.787 cv
121.356 253.547 121.266 253.357 121.106 253.227 cv
120.946 253.097 120.586 252.967 120.026 252.847 cv
119.716 252.777 li
119.156 252.657 118.746 252.477 118.506 252.237 cv
118.256 251.997 118.136 251.667 118.136 251.237 cv
118.136 250.727 118.316 250.327 118.676 250.047 cv
119.036 249.767 119.556 249.627 120.236 249.627 cv
120.566 249.627 120.876 249.657 121.176 249.707 cv
121.466 249.757 121.736 249.827 121.986 249.917 cv
f
157.991 240.633 mo
157.991 244.133 li
f
157.991 240.633 mo
157.991 244.133 li
@
150.251 248.497 mo
150.251 249.537 li
149.911 249.237 149.561 249.007 149.181 248.847 cv
148.801 248.697 148.411 248.617 147.991 248.617 cv
147.151 248.617 146.511 248.877 146.071 249.387 cv
145.631 249.897 145.411 250.627 145.411 251.587 cv
145.411 252.547 145.631 253.287 146.071 253.797 cv
146.511 254.307 147.151 254.557 147.991 254.557 cv
148.411 254.557 148.801 254.487 149.181 254.327 cv
149.561 254.177 149.911 253.947 150.251 253.637 cv
150.251 254.667 li
149.901 254.907 149.531 255.077 149.151 255.187 cv
148.771 255.297 148.361 255.357 147.931 255.357 cv
146.831 255.357 145.961 255.027 145.321 254.357 cv
144.681 253.687 144.371 252.767 144.371 251.587 cv
144.371 250.417 144.681 249.497 145.321 248.817 cv
145.961 248.147 146.831 247.807 147.931 247.807 cv
148.371 247.807 148.781 247.867 149.161 247.977 cv
149.541 248.097 149.911 248.267 150.251 248.497 cv
f
153.851 250.387 mo
153.371 250.387 152.991 250.577 152.711 250.957 cv
152.431 251.337 152.291 251.847 152.291 252.497 cv
152.291 253.157 152.421 253.667 152.701 254.047 cv
152.981 254.427 153.361 254.607 153.851 254.607 cv
154.331 254.607 154.711 254.427 154.991 254.047 cv
155.271 253.667 155.411 253.157 155.411 252.497 cv
155.411 251.857 155.271 251.337 154.991 250.957 cv
154.711 250.577 154.331 250.387 153.851 250.387 cv
153.851 249.627 mo
154.631 249.627 155.241 249.887 155.691 250.387 cv
156.131 250.897 156.361 251.597 156.361 252.497 cv
156.361 253.397 156.131 254.097 155.691 254.597 cv
155.241 255.107 154.631 255.357 153.851 255.357 cv
153.061 255.357 152.441 255.107 152.001 254.597 cv
151.561 254.097 151.341 253.397 151.341 252.497 cv
151.341 251.597 151.561 250.897 152.001 250.387 cv
152.441 249.887 153.061 249.627 153.851 249.627 cv
f
157.851 247.627 mo
158.751 247.627 li
158.751 255.227 li
157.851 255.227 li
157.851 247.627 li
f
162.751 250.387 mo
162.271 250.387 161.891 250.577 161.611 250.957 cv
161.331 251.337 161.191 251.847 161.191 252.497 cv
161.191 253.157 161.321 253.667 161.601 254.047 cv
161.881 254.427 162.261 254.607 162.751 254.607 cv
163.231 254.607 163.611 254.427 163.891 254.047 cv
164.171 253.667 164.311 253.157 164.311 252.497 cv
164.311 251.857 164.171 251.337 163.891 250.957 cv
163.611 250.577 163.231 250.387 162.751 250.387 cv
162.751 249.627 mo
163.531 249.627 164.141 249.887 164.591 250.387 cv
165.031 250.897 165.261 251.597 165.261 252.497 cv
165.261 253.397 165.031 254.097 164.591 254.597 cv
164.141 255.107 163.531 255.357 162.751 255.357 cv
161.961 255.357 161.341 255.107 160.901 254.597 cv
160.461 254.097 160.241 253.397 160.241 252.497 cv
160.241 251.597 160.461 250.897 160.901 250.387 cv
161.341 249.887 161.961 249.627 162.751 249.627 cv
f
171.301 251.927 mo
171.301 255.227 li
170.401 255.227 li
170.401 251.957 li
170.401 251.437 170.291 251.057 170.091 250.797 cv
169.891 250.537 169.591 250.407 169.191 250.407 cv
168.701 250.407 168.321 250.567 168.041 250.877 cv
167.761 251.187 167.621 251.607 167.621 252.137 cv
167.621 255.227 li
166.721 255.227 li
166.721 249.757 li
167.621 249.757 li
167.621 250.607 li
167.831 250.287 168.081 250.037 168.381 249.877 cv
168.671 249.717 169.011 249.627 169.391 249.627 cv
170.011 249.627 170.491 249.827 170.811 250.217 cv
171.131 250.607 171.301 251.177 171.301 251.927 cv
f
203.944 240.633 mo
203.944 244.133 li
f
203.944 240.633 mo
203.944 244.133 li
@
192.986 247.937 mo
193.976 247.937 li
193.976 254.397 li
197.526 254.397 li
197.526 255.227 li
192.986 255.227 li
192.986 247.937 li
f
203.196 252.267 mo
203.196 252.707 li
199.066 252.707 li
199.106 253.327 199.286 253.807 199.626 254.127 cv
199.956 254.447 200.416 254.607 201.016 254.607 cv
201.356 254.607 201.696 254.567 202.016 254.487 cv
202.336 254.407 202.666 254.277 202.986 254.097 cv
202.986 254.947 li
202.666 255.087 202.336 255.197 201.996 255.257 cv
201.656 255.317 201.306 255.357 200.966 255.357 cv
200.086 255.357 199.396 255.107 198.886 254.607 cv
198.376 254.107 198.126 253.417 198.126 252.547 cv
198.126 251.657 198.366 250.947 198.846 250.417 cv
199.326 249.897 199.986 249.627 200.806 249.627 cv
201.546 249.627 202.126 249.867 202.556 250.337 cv
202.976 250.817 203.196 251.457 203.196 252.267 cv
202.296 252.007 mo
202.286 251.517 202.146 251.127 201.886 250.827 cv
201.616 250.537 201.256 250.387 200.816 250.387 cv
200.316 250.387 199.916 250.537 199.616 250.817 cv
199.316 251.097 199.136 251.497 199.096 252.007 cv
202.296 252.007 li
f
204.576 253.067 mo
204.576 249.757 li
205.476 249.757 li
205.476 253.037 li
205.476 253.557 205.576 253.937 205.776 254.197 cv
205.976 254.457 206.276 254.587 206.686 254.587 cv
207.166 254.587 207.556 254.437 207.836 254.127 cv
208.116 253.817 208.256 253.397 208.256 252.857 cv
208.256 249.757 li
209.156 249.757 li
209.156 255.227 li
208.256 255.227 li
208.256 254.387 li
208.036 254.727 207.776 254.967 207.496 255.127 cv
207.206 255.277 206.876 255.357 206.496 255.357 cv
205.866 255.357 205.386 255.167 205.066 254.777 cv
204.736 254.397 204.576 253.827 204.576 253.067 cv
206.836 249.627 mo
206.836 249.627 li
f
210.976 247.627 mo
211.876 247.627 li
211.876 252.117 li
214.556 249.757 li
215.706 249.757 li
212.806 252.317 li
215.826 255.227 li
214.656 255.227 li
211.876 252.557 li
211.876 255.227 li
210.976 255.227 li
210.976 247.627 li
f
249.897 240.633 mo
249.897 244.133 li
f
249.897 240.633 mo
249.897 244.133 li
@
240.525 247.937 mo
241.995 247.937 li
243.855 252.897 li
245.725 247.937 li
247.195 247.937 li
247.195 255.227 li
246.235 255.227 li
246.235 248.827 li
244.355 253.827 li
243.365 253.827 li
241.485 248.827 li
241.485 255.227 li
240.525 255.227 li
240.525 247.937 li
f
251.395 255.727 mo
251.135 256.367 250.885 256.797 250.645 256.997 cv
250.405 257.197 250.085 257.297 249.685 257.297 cv
248.965 257.297 li
248.965 256.547 li
249.495 256.547 li
249.735 256.547 249.925 256.487 250.065 256.367 cv
250.205 256.247 250.355 255.977 250.525 255.537 cv
250.685 255.137 li
248.475 249.757 li
249.425 249.757 li
251.135 254.037 li
252.845 249.757 li
253.795 249.757 li
251.395 255.727 li
f
259.715 252.267 mo
259.715 252.707 li
255.585 252.707 li
255.625 253.327 255.805 253.807 256.145 254.127 cv
256.475 254.447 256.935 254.607 257.535 254.607 cv
257.875 254.607 258.215 254.567 258.535 254.487 cv
258.855 254.407 259.185 254.277 259.505 254.097 cv
259.505 254.947 li
259.185 255.087 258.855 255.197 258.515 255.257 cv
258.175 255.317 257.825 255.357 257.485 255.357 cv
256.605 255.357 255.915 255.107 255.405 254.607 cv
254.895 254.107 254.645 253.417 254.645 252.547 cv
254.645 251.657 254.885 250.947 255.365 250.417 cv
255.845 249.897 256.505 249.627 257.325 249.627 cv
258.065 249.627 258.645 249.867 259.075 250.337 cv
259.495 250.817 259.715 251.457 259.715 252.267 cv
258.815 252.007 mo
258.805 251.517 258.665 251.127 258.405 250.827 cv
258.135 250.537 257.775 250.387 257.335 250.387 cv
256.835 250.387 256.435 250.537 256.135 250.817 cv
255.835 251.097 255.655 251.497 255.615 252.007 cv
258.815 252.007 li
f
295.85 240.633 mo
295.85 244.133 li
f
295.85 240.633 mo
295.85 244.133 li
@
287.09 248.907 mo
285.75 252.537 li
288.43 252.537 li
287.09 248.907 li
286.53 247.937 mo
287.65 247.937 li
290.43 255.227 li
289.4 255.227 li
288.74 253.357 li
285.45 253.357 li
284.79 255.227 li
283.75 255.227 li
286.53 247.937 li
f
291.49 247.937 mo
292.48 247.937 li
292.48 254.397 li
296.03 254.397 li
296.03 255.227 li
291.49 255.227 li
291.49 247.937 li
f
297.06 247.937 mo
298.05 247.937 li
298.05 254.397 li
301.6 254.397 li
301.6 255.227 li
297.06 255.227 li
297.06 247.937 li
f
302.89 254.397 mo
304.5 254.397 li
304.5 248.837 li
302.75 249.187 li
302.75 248.287 li
304.49 247.937 li
305.48 247.937 li
305.48 254.397 li
307.09 254.397 li
307.09 255.227 li
302.89 255.227 li
302.89 254.397 li
f
341.803 240.633 mo
341.803 244.133 li
f
341.803 240.633 mo
341.803 244.133 li
@
333.043 248.907 mo
331.703 252.537 li
334.383 252.537 li
333.043 248.907 li
332.483 247.937 mo
333.603 247.937 li
336.383 255.227 li
335.353 255.227 li
334.693 253.357 li
331.403 253.357 li
330.743 255.227 li
329.703 255.227 li
332.483 247.937 li
f
337.443 247.937 mo
338.433 247.937 li
338.433 254.397 li
341.983 254.397 li
341.983 255.227 li
337.443 255.227 li
337.443 247.937 li
f
343.013 247.937 mo
344.003 247.937 li
344.003 254.397 li
347.553 254.397 li
347.553 255.227 li
343.013 255.227 li
343.013 247.937 li
f
349.523 254.397 mo
352.963 254.397 li
352.963 255.227 li
348.333 255.227 li
348.333 254.397 li
348.703 254.017 349.213 253.497 349.863 252.837 cv
350.503 252.187 350.913 251.767 351.083 251.577 cv
351.403 251.227 351.623 250.927 351.743 250.677 cv
351.863 250.437 351.933 250.187 351.933 249.947 cv
351.933 249.567 351.793 249.247 351.523 249.007 cv
351.253 248.767 350.903 248.637 350.463 248.637 cv
350.153 248.637 349.823 248.697 349.483 248.797 cv
349.143 248.907 348.773 249.067 348.383 249.287 cv
348.383 248.287 li
348.783 248.127 349.153 248.007 349.493 247.927 cv
349.833 247.847 350.153 247.807 350.443 247.807 cv
351.193 247.807 351.793 247.997 352.243 248.377 cv
352.693 248.757 352.923 249.257 352.923 249.887 cv
352.923 250.187 352.863 250.477 352.753 250.737 cv
352.643 251.007 352.443 251.327 352.143 251.687 cv
352.063 251.787 351.803 252.057 351.363 252.507 cv
350.923 252.957 350.313 253.587 349.523 254.397 cv
f
387.755 240.633 mo
387.755 244.133 li
f
387.755 240.633 mo
387.755 244.133 li
@
378.996 248.907 mo
377.656 252.537 li
380.336 252.537 li
378.996 248.907 li
378.436 247.937 mo
379.556 247.937 li
382.336 255.227 li
381.306 255.227 li
380.646 253.357 li
377.356 253.357 li
376.696 255.227 li
375.656 255.227 li
378.436 247.937 li
f
383.396 247.937 mo
384.386 247.937 li
384.386 254.397 li
387.936 254.397 li
387.936 255.227 li
383.396 255.227 li
383.396 247.937 li
f
388.966 247.937 mo
389.956 247.937 li
389.956 254.397 li
393.506 254.397 li
393.506 255.227 li
388.966 255.227 li
388.966 247.937 li
f
397.616 251.297 mo
398.086 251.397 398.456 251.607 398.716 251.927 cv
398.976 252.247 399.116 252.647 399.116 253.107 cv
399.116 253.827 398.866 254.387 398.376 254.777 cv
397.876 255.167 397.176 255.357 396.266 255.357 cv
395.956 255.357 395.636 255.327 395.316 255.267 cv
394.996 255.217 394.656 255.127 394.316 255.007 cv
394.316 254.057 li
394.586 254.217 394.886 254.337 395.216 254.417 cv
395.536 254.497 395.876 254.537 396.236 254.537 cv
396.856 254.537 397.326 254.417 397.646 254.177 cv
397.966 253.937 398.136 253.577 398.136 253.107 cv
398.136 252.687 397.986 252.347 397.686 252.107 cv
397.386 251.867 396.966 251.737 396.426 251.737 cv
395.576 251.737 li
395.576 250.927 li
396.466 250.927 li
396.946 250.927 397.316 250.837 397.576 250.637 cv
397.836 250.447 397.966 250.167 397.966 249.797 cv
397.966 249.427 397.826 249.137 397.566 248.937 cv
397.296 248.737 396.916 248.637 396.426 248.637 cv
396.156 248.637 395.866 248.667 395.556 248.727 cv
395.246 248.787 394.906 248.877 394.536 248.997 cv
394.536 248.117 li
394.906 248.017 395.256 247.937 395.586 247.887 cv
395.906 247.837 396.216 247.807 396.516 247.807 cv
397.256 247.807 397.846 247.977 398.286 248.317 cv
398.726 248.657 398.946 249.117 398.946 249.697 cv
398.946 250.097 398.826 250.437 398.596 250.717 cv
398.366 250.997 398.036 251.197 397.616 251.297 cv
f
433.708 240.633 mo
433.708 244.133 li
f
433.708 240.633 mo
433.708 244.133 li
@
424.949 248.907 mo
423.609 252.537 li
426.289 252.537 li
424.949 248.907 li
424.389 247.937 mo
425.509 247.937 li
428.289 255.227 li
427.259 255.227 li
426.599 253.357 li
423.309 253.357 li
422.649 255.227 li
421.609 255.227 li
424.389 247.937 li
f
429.349 247.937 mo
430.339 247.937 li
430.339 254.397 li
433.889 254.397 li
433.889 255.227 li
429.349 255.227 li
429.349 247.937 li
f
434.919 247.937 mo
435.909 247.937 li
435.909 254.397 li
439.459 254.397 li
439.459 255.227 li
434.919 255.227 li
434.919 247.937 li
f
443.289 248.797 mo
440.799 252.687 li
443.289 252.687 li
443.289 248.797 li
443.029 247.937 mo
444.269 247.937 li
444.269 252.687 li
445.309 252.687 li
445.309 253.507 li
444.269 253.507 li
444.269 255.227 li
443.289 255.227 li
443.289 253.507 li
439.999 253.507 li
439.999 252.557 li
443.029 247.937 li
f
479.661 240.633 mo
479.661 244.133 li
f
479.661 240.633 mo
479.661 244.133 li
@
475.695 248.497 mo
475.695 249.537 li
475.355 249.237 475.005 249.007 474.625 248.847 cv
474.245 248.697 473.855 248.617 473.435 248.617 cv
472.595 248.617 471.955 248.877 471.515 249.387 cv
471.075 249.897 470.855 250.627 470.855 251.587 cv
470.855 252.547 471.075 253.287 471.515 253.797 cv
471.955 254.307 472.595 254.557 473.435 254.557 cv
473.855 254.557 474.245 254.487 474.625 254.327 cv
475.005 254.177 475.355 253.947 475.695 253.637 cv
475.695 254.667 li
475.345 254.907 474.975 255.077 474.595 255.187 cv
474.215 255.297 473.805 255.357 473.375 255.357 cv
472.275 255.357 471.405 255.027 470.765 254.357 cv
470.125 253.687 469.815 252.767 469.815 251.587 cv
469.815 250.417 470.125 249.497 470.765 248.817 cv
471.405 248.147 472.275 247.807 473.375 247.807 cv
473.815 247.807 474.225 247.867 474.605 247.977 cv
474.985 248.097 475.355 248.267 475.695 248.497 cv
f
477.215 247.937 mo
478.545 247.937 li
481.775 254.037 li
481.775 247.937 li
482.735 247.937 li
482.735 255.227 li
481.405 255.227 li
478.175 249.127 li
478.175 255.227 li
477.215 255.227 li
477.215 247.937 li
f
489.065 248.177 mo
489.065 249.137 li
488.685 248.957 488.335 248.827 488.005 248.737 cv
487.665 248.657 487.345 248.607 487.045 248.607 cv
486.505 248.607 486.085 248.717 485.795 248.917 cv
485.505 249.127 485.365 249.427 485.365 249.807 cv
485.365 250.127 485.455 250.377 485.655 250.537 cv
485.845 250.707 486.215 250.837 486.755 250.937 cv
487.355 251.057 li
488.085 251.197 488.625 251.447 488.975 251.797 cv
489.325 252.157 489.505 252.627 489.505 253.217 cv
489.505 253.927 489.265 254.457 488.795 254.817 cv
488.315 255.177 487.625 255.357 486.715 255.357 cv
486.365 255.357 485.995 255.317 485.605 255.247 cv
485.215 255.177 484.815 255.067 484.405 254.907 cv
484.405 253.887 li
484.805 254.117 485.195 254.287 485.575 254.397 cv
485.955 254.517 486.335 254.567 486.715 254.567 cv
487.275 254.567 487.705 254.457 488.015 254.237 cv
488.315 254.017 488.475 253.707 488.475 253.287 cv
488.475 252.927 488.365 252.647 488.145 252.447 cv
487.925 252.247 487.565 252.097 487.065 251.997 cv
486.465 251.877 li
485.725 251.737 485.195 251.507 484.865 251.187 cv
484.535 250.877 484.375 250.447 484.375 249.887 cv
484.375 249.247 484.595 248.737 485.055 248.367 cv
485.505 247.997 486.135 247.807 486.935 247.807 cv
487.275 247.807 487.615 247.837 487.975 247.897 cv
488.325 247.957 488.685 248.057 489.065 248.177 cv
f
525.614 240.633 mo
525.614 244.133 li
f
525.614 240.633 mo
525.614 244.133 li
@
515.969 247.937 mo
516.959 247.937 li
516.959 254.397 li
520.509 254.397 li
520.509 255.227 li
515.969 255.227 li
515.969 247.937 li
f
523.779 255.727 mo
523.519 256.367 523.269 256.797 523.029 256.997 cv
522.789 257.197 522.469 257.297 522.069 257.297 cv
521.349 257.297 li
521.349 256.547 li
521.879 256.547 li
522.119 256.547 522.309 256.487 522.449 256.367 cv
522.589 256.247 522.739 255.977 522.909 255.537 cv
523.069 255.137 li
520.859 249.757 li
521.809 249.757 li
523.519 254.037 li
525.229 249.757 li
526.179 249.757 li
523.779 255.727 li
f
531.679 250.807 mo
531.899 250.407 532.169 250.117 532.479 249.917 cv
532.789 249.727 533.159 249.627 533.589 249.627 cv
534.149 249.627 534.589 249.827 534.899 250.227 cv
535.209 250.627 535.369 251.197 535.369 251.927 cv
535.369 255.227 li
534.469 255.227 li
534.469 251.957 li
534.469 251.437 534.369 251.047 534.189 250.787 cv
533.999 250.537 533.719 250.407 533.339 250.407 cv
532.869 250.407 532.499 250.567 532.229 250.877 cv
531.959 251.187 531.829 251.607 531.829 252.137 cv
531.829 255.227 li
530.929 255.227 li
530.929 251.957 li
530.929 251.437 530.829 251.047 530.649 250.787 cv
530.459 250.537 530.169 250.407 529.789 250.407 cv
529.329 250.407 528.959 250.567 528.689 250.877 cv
528.419 251.187 528.289 251.607 528.289 252.137 cv
528.289 255.227 li
527.389 255.227 li
527.389 249.757 li
528.289 249.757 li
528.289 250.607 li
528.489 250.277 528.739 250.027 529.029 249.867 cv
529.309 249.707 529.649 249.627 530.049 249.627 cv
530.449 249.627 530.779 249.727 531.059 249.927 cv
531.339 250.127 531.539 250.427 531.679 250.807 cv
f
571.567 240.633 mo
571.567 244.133 li
f
571.567 240.633 mo
571.567 244.133 li
@
559.081 248.907 mo
557.741 252.537 li
560.421 252.537 li
559.081 248.907 li
558.521 247.937 mo
559.641 247.937 li
562.421 255.227 li
561.391 255.227 li
560.731 253.357 li
557.441 253.357 li
556.781 255.227 li
555.741 255.227 li
558.521 247.937 li
f
567.041 250.587 mo
567.041 247.627 li
567.941 247.627 li
567.941 255.227 li
567.041 255.227 li
567.041 254.407 li
566.851 254.737 566.611 254.977 566.321 255.127 cv
566.031 255.277 565.691 255.357 565.291 255.357 cv
564.631 255.357 564.091 255.097 563.671 254.577 cv
563.251 254.057 563.051 253.357 563.051 252.497 cv
563.051 251.637 563.251 250.947 563.671 250.417 cv
564.091 249.897 564.631 249.627 565.291 249.627 cv
565.691 249.627 566.031 249.707 566.321 249.867 cv
566.611 250.027 566.851 250.267 567.041 250.587 cv
563.981 252.497 mo
563.981 253.157 564.111 253.677 564.381 254.057 cv
564.651 254.437 565.031 254.617 565.511 254.617 cv
565.981 254.617 566.351 254.437 566.631 254.057 cv
566.901 253.677 567.041 253.157 567.041 252.497 cv
567.041 251.837 566.901 251.327 566.631 250.947 cv
566.351 250.567 565.981 250.377 565.511 250.377 cv
565.031 250.377 564.651 250.567 564.381 250.947 cv
564.111 251.327 563.981 251.837 563.981 252.497 cv
f
574.471 252.267 mo
574.471 252.707 li
570.341 252.707 li
570.381 253.327 570.561 253.807 570.901 254.127 cv
571.231 254.447 571.691 254.607 572.291 254.607 cv
572.631 254.607 572.971 254.567 573.291 254.487 cv
573.611 254.407 573.941 254.277 574.261 254.097 cv
574.261 254.947 li
573.941 255.087 573.611 255.197 573.271 255.257 cv
572.931 255.317 572.581 255.357 572.241 255.357 cv
571.361 255.357 570.671 255.107 570.161 254.607 cv
569.651 254.107 569.401 253.417 569.401 252.547 cv
569.401 251.657 569.641 250.947 570.121 250.417 cv
570.601 249.897 571.261 249.627 572.081 249.627 cv
572.821 249.627 573.401 249.867 573.831 250.337 cv
574.251 250.817 574.471 251.457 574.471 252.267 cv
573.571 252.007 mo
573.561 251.517 573.421 251.127 573.161 250.827 cv
572.891 250.537 572.531 250.387 572.091 250.387 cv
571.591 250.387 571.191 250.537 570.891 250.817 cv
570.591 251.097 570.411 251.497 570.371 252.007 cv
573.571 252.007 li
f
580.491 251.927 mo
580.491 255.227 li
579.591 255.227 li
579.591 251.957 li
579.591 251.437 579.481 251.057 579.281 250.797 cv
579.081 250.537 578.781 250.407 578.381 250.407 cv
577.891 250.407 577.511 250.567 577.231 250.877 cv
576.951 251.187 576.811 251.607 576.811 252.137 cv
576.811 255.227 li
575.911 255.227 li
575.911 249.757 li
576.811 249.757 li
576.811 250.607 li
577.021 250.287 577.271 250.037 577.571 249.877 cv
577.861 249.717 578.201 249.627 578.581 249.627 cv
579.201 249.627 579.681 249.827 580.001 250.217 cv
580.321 250.607 580.491 251.177 580.491 251.927 cv
f
584.401 250.387 mo
583.921 250.387 583.541 250.577 583.261 250.957 cv
582.981 251.337 582.841 251.847 582.841 252.497 cv
582.841 253.157 582.971 253.667 583.251 254.047 cv
583.531 254.427 583.911 254.607 584.401 254.607 cv
584.881 254.607 585.261 254.427 585.541 254.047 cv
585.821 253.667 585.961 253.157 585.961 252.497 cv
585.961 251.857 585.821 251.337 585.541 250.957 cv
585.261 250.577 584.881 250.387 584.401 250.387 cv
584.401 249.627 mo
585.181 249.627 585.791 249.887 586.241 250.387 cv
586.681 250.897 586.911 251.597 586.911 252.497 cv
586.911 253.397 586.681 254.097 586.241 254.597 cv
585.791 255.107 585.181 255.357 584.401 255.357 cv
583.611 255.357 582.991 255.107 582.551 254.597 cv
582.111 254.097 581.891 253.397 581.891 252.497 cv
581.891 251.597 582.111 250.897 582.551 250.387 cv
582.991 249.887 583.611 249.627 584.401 249.627 cv
f
617.52 240.633 mo
617.52 244.133 li
f
617.52 240.633 mo
617.52 244.133 li
@
613.923 254.187 mo
613.923 252.227 li
612.313 252.227 li
612.313 251.417 li
614.903 251.417 li
614.903 254.547 li
614.523 254.827 614.103 255.027 613.643 255.157 cv
613.183 255.287 612.693 255.357 612.173 255.357 cv
611.033 255.357 610.133 255.027 609.493 254.367 cv
608.853 253.707 608.533 252.777 608.533 251.587 cv
608.533 250.407 608.853 249.477 609.493 248.807 cv
610.133 248.147 611.033 247.807 612.173 247.807 cv
612.643 247.807 613.093 247.867 613.523 247.987 cv
613.953 248.107 614.353 248.277 614.713 248.497 cv
614.713 249.547 li
614.343 249.247 613.953 249.017 613.543 248.857 cv
613.133 248.697 612.703 248.617 612.253 248.617 cv
611.353 248.617 610.683 248.867 610.243 249.367 cv
609.793 249.867 609.573 250.607 609.573 251.587 cv
609.573 252.577 609.793 253.317 610.243 253.817 cv
610.683 254.317 611.353 254.557 612.253 254.557 cv
612.593 254.557 612.903 254.527 613.183 254.467 cv
613.463 254.407 613.703 254.317 613.923 254.187 cv
f
619.153 252.477 mo
618.423 252.477 617.923 252.567 617.643 252.727 cv
617.363 252.897 617.223 253.177 617.223 253.577 cv
617.223 253.897 617.323 254.157 617.533 254.337 cv
617.743 254.527 618.033 254.617 618.393 254.617 cv
618.893 254.617 619.293 254.447 619.593 254.087 cv
619.893 253.737 620.043 253.267 620.043 252.677 cv
620.043 252.477 li
619.153 252.477 li
620.943 252.107 mo
620.943 255.227 li
620.043 255.227 li
620.043 254.397 li
619.833 254.737 619.573 254.977 619.273 255.127 cv
618.973 255.277 618.593 255.357 618.153 255.357 cv
617.593 255.357 617.143 255.207 616.813 254.897 cv
616.483 254.587 616.323 254.167 616.323 253.637 cv
616.323 253.027 616.523 252.567 616.943 252.247 cv
617.353 251.937 617.963 251.777 618.783 251.777 cv
620.043 251.777 li
620.043 251.687 li
620.043 251.277 619.903 250.957 619.633 250.727 cv
619.363 250.507 618.983 250.387 618.493 250.387 cv
618.173 250.387 617.873 250.427 617.573 250.507 cv
617.273 250.587 616.993 250.697 616.723 250.837 cv
616.723 250.007 li
617.043 249.887 617.363 249.787 617.673 249.727 cv
617.983 249.667 618.283 249.627 618.583 249.627 cv
619.373 249.627 619.963 249.837 620.353 250.247 cv
620.743 250.657 620.943 251.277 620.943 252.107 cv
f
626.283 249.917 mo
626.283 250.767 li
626.023 250.647 625.763 250.547 625.493 250.477 cv
625.213 250.417 624.933 250.377 624.643 250.377 cv
624.193 250.377 623.853 250.447 623.633 250.587 cv
623.413 250.727 623.303 250.927 623.303 251.197 cv
623.303 251.407 623.383 251.567 623.543 251.687 cv
623.703 251.807 624.023 251.927 624.503 252.027 cv
624.813 252.097 li
625.453 252.237 625.903 252.437 626.173 252.677 cv
626.433 252.927 626.573 253.277 626.573 253.717 cv
626.573 254.227 626.373 254.627 625.973 254.917 cv
625.573 255.217 625.013 255.357 624.313 255.357 cv
624.013 255.357 623.713 255.327 623.393 255.277 cv
623.073 255.227 622.743 255.147 622.393 255.027 cv
622.393 254.097 li
622.723 254.277 623.053 254.407 623.373 254.487 cv
623.693 254.577 624.013 254.617 624.333 254.617 cv
624.753 254.617 625.083 254.547 625.313 254.407 cv
625.533 254.267 625.653 254.057 625.653 253.787 cv
625.653 253.547 625.563 253.357 625.403 253.227 cv
625.243 253.097 624.883 252.967 624.323 252.847 cv
624.013 252.777 li
623.453 252.657 623.043 252.477 622.803 252.237 cv
622.553 251.997 622.433 251.667 622.433 251.237 cv
622.433 250.727 622.613 250.327 622.973 250.047 cv
623.333 249.767 623.853 249.627 624.533 249.627 cv
624.863 249.627 625.173 249.657 625.473 249.707 cv
625.763 249.757 626.033 249.827 626.283 249.917 cv
f
663.473 240.633 mo
663.473 244.133 li
f
663.473 240.633 mo
663.473 244.133 li
@
656.697 254.187 mo
656.697 252.227 li
655.087 252.227 li
655.087 251.417 li
657.677 251.417 li
657.677 254.547 li
657.297 254.827 656.877 255.027 656.417 255.157 cv
655.957 255.287 655.466 255.357 654.947 255.357 cv
653.807 255.357 652.906 255.027 652.267 254.367 cv
651.627 253.707 651.307 252.777 651.307 251.587 cv
651.307 250.407 651.627 249.477 652.267 248.807 cv
652.906 248.147 653.807 247.807 654.947 247.807 cv
655.417 247.807 655.867 247.867 656.297 247.987 cv
656.727 248.107 657.127 248.277 657.487 248.497 cv
657.487 249.547 li
657.117 249.247 656.727 249.017 656.317 248.857 cv
655.906 248.697 655.477 248.617 655.027 248.617 cv
654.127 248.617 653.457 248.867 653.017 249.367 cv
652.567 249.867 652.346 250.607 652.346 251.587 cv
652.346 252.577 652.567 253.317 653.017 253.817 cv
653.457 254.317 654.127 254.557 655.027 254.557 cv
655.367 254.557 655.677 254.527 655.957 254.467 cv
656.237 254.407 656.477 254.317 656.697 254.187 cv
f
661.926 252.477 mo
661.196 252.477 660.696 252.567 660.416 252.727 cv
660.136 252.897 659.996 253.177 659.996 253.577 cv
659.996 253.897 660.096 254.157 660.306 254.337 cv
660.516 254.527 660.806 254.617 661.166 254.617 cv
661.666 254.617 662.066 254.447 662.366 254.087 cv
662.666 253.737 662.816 253.267 662.816 252.677 cv
662.816 252.477 li
661.926 252.477 li
663.716 252.107 mo
663.716 255.227 li
662.816 255.227 li
662.816 254.397 li
662.606 254.737 662.346 254.977 662.046 255.127 cv
661.746 255.277 661.366 255.357 660.926 255.357 cv
660.366 255.357 659.916 255.207 659.586 254.897 cv
659.256 254.587 659.096 254.167 659.096 253.637 cv
659.096 253.027 659.296 252.567 659.716 252.247 cv
660.126 251.937 660.736 251.777 661.556 251.777 cv
662.816 251.777 li
662.816 251.687 li
662.816 251.277 662.676 250.957 662.406 250.727 cv
662.136 250.507 661.756 250.387 661.266 250.387 cv
660.946 250.387 660.646 250.427 660.346 250.507 cv
660.046 250.587 659.766 250.697 659.496 250.837 cv
659.496 250.007 li
659.816 249.887 660.136 249.787 660.446 249.727 cv
660.756 249.667 661.056 249.627 661.356 249.627 cv
662.146 249.627 662.736 249.837 663.126 250.247 cv
663.516 250.657 663.716 251.277 663.716 252.107 cv
f
669.057 249.917 mo
669.057 250.767 li
668.797 250.647 668.536 250.547 668.267 250.477 cv
667.987 250.417 667.707 250.377 667.417 250.377 cv
666.967 250.377 666.627 250.447 666.407 250.587 cv
666.187 250.727 666.077 250.927 666.077 251.197 cv
666.077 251.407 666.157 251.567 666.317 251.687 cv
666.477 251.807 666.797 251.927 667.277 252.027 cv
667.587 252.097 li
668.227 252.237 668.677 252.437 668.947 252.677 cv
669.207 252.927 669.346 253.277 669.346 253.717 cv
669.346 254.227 669.147 254.627 668.747 254.917 cv
668.346 255.217 667.786 255.357 667.087 255.357 cv
666.786 255.357 666.487 255.327 666.167 255.277 cv
665.846 255.227 665.517 255.147 665.167 255.027 cv
665.167 254.097 li
665.497 254.277 665.827 254.407 666.147 254.487 cv
666.467 254.577 666.786 254.617 667.107 254.617 cv
667.527 254.617 667.857 254.547 668.087 254.407 cv
668.307 254.267 668.427 254.057 668.427 253.787 cv
668.427 253.547 668.337 253.357 668.177 253.227 cv
668.017 253.097 667.657 252.967 667.096 252.847 cv
666.786 252.777 li
666.227 252.657 665.817 252.477 665.577 252.237 cv
665.327 251.997 665.207 251.667 665.207 251.237 cv
665.207 250.727 665.387 250.327 665.747 250.047 cv
666.107 249.767 666.627 249.627 667.307 249.627 cv
667.637 249.627 667.947 249.657 668.247 249.707 cv
668.536 249.757 668.807 249.827 669.057 249.917 cv
f
671.076 254.397 mo
672.686 254.397 li
672.686 248.837 li
670.936 249.187 li
670.936 248.287 li
672.677 247.937 li
673.667 247.937 li
673.667 254.397 li
675.276 254.397 li
675.276 255.227 li
671.076 255.227 li
671.076 254.397 li
f
709.426 240.633 mo
709.426 244.133 li
f
709.426 240.633 mo
709.426 244.133 li
@
702.649 254.187 mo
702.649 252.227 li
701.039 252.227 li
701.039 251.417 li
703.629 251.417 li
703.629 254.547 li
703.249 254.827 702.829 255.027 702.369 255.157 cv
701.909 255.287 701.419 255.357 700.899 255.357 cv
699.759 255.357 698.859 255.027 698.219 254.367 cv
697.579 253.707 697.259 252.777 697.259 251.587 cv
697.259 250.407 697.579 249.477 698.219 248.807 cv
698.859 248.147 699.759 247.807 700.899 247.807 cv
701.369 247.807 701.819 247.867 702.249 247.987 cv
702.679 248.107 703.079 248.277 703.439 248.497 cv
703.439 249.547 li
703.069 249.247 702.679 249.017 702.269 248.857 cv
701.859 248.697 701.429 248.617 700.979 248.617 cv
700.079 248.617 699.409 248.867 698.969 249.367 cv
698.519 249.867 698.299 250.607 698.299 251.587 cv
698.299 252.577 698.519 253.317 698.969 253.817 cv
699.409 254.317 700.079 254.557 700.979 254.557 cv
701.319 254.557 701.629 254.527 701.909 254.467 cv
702.189 254.407 702.429 254.317 702.649 254.187 cv
f
707.879 252.477 mo
707.149 252.477 706.649 252.567 706.369 252.727 cv
706.089 252.897 705.949 253.177 705.949 253.577 cv
705.949 253.897 706.049 254.157 706.259 254.337 cv
706.469 254.527 706.759 254.617 707.119 254.617 cv
707.619 254.617 708.019 254.447 708.319 254.087 cv
708.619 253.737 708.769 253.267 708.769 252.677 cv
708.769 252.477 li
707.879 252.477 li
709.669 252.107 mo
709.669 255.227 li
708.769 255.227 li
708.769 254.397 li
708.559 254.737 708.299 254.977 707.999 255.127 cv
707.699 255.277 707.319 255.357 706.879 255.357 cv
706.319 255.357 705.869 255.207 705.539 254.897 cv
705.209 254.587 705.049 254.167 705.049 253.637 cv
705.049 253.027 705.249 252.567 705.669 252.247 cv
706.079 251.937 706.689 251.777 707.509 251.777 cv
708.769 251.777 li
708.769 251.687 li
708.769 251.277 708.629 250.957 708.359 250.727 cv
708.089 250.507 707.709 250.387 707.219 250.387 cv
706.899 250.387 706.599 250.427 706.299 250.507 cv
705.999 250.587 705.719 250.697 705.449 250.837 cv
705.449 250.007 li
705.769 249.887 706.089 249.787 706.399 249.727 cv
706.709 249.667 707.009 249.627 707.309 249.627 cv
708.099 249.627 708.689 249.837 709.079 250.247 cv
709.469 250.657 709.669 251.277 709.669 252.107 cv
f
715.009 249.917 mo
715.009 250.767 li
714.749 250.647 714.489 250.547 714.219 250.477 cv
713.939 250.417 713.659 250.377 713.369 250.377 cv
712.919 250.377 712.579 250.447 712.359 250.587 cv
712.139 250.727 712.029 250.927 712.029 251.197 cv
712.029 251.407 712.109 251.567 712.269 251.687 cv
712.429 251.807 712.749 251.927 713.229 252.027 cv
713.539 252.097 li
714.179 252.237 714.629 252.437 714.899 252.677 cv
715.159 252.927 715.299 253.277 715.299 253.717 cv
715.299 254.227 715.099 254.627 714.699 254.917 cv
714.299 255.217 713.739 255.357 713.039 255.357 cv
712.739 255.357 712.439 255.327 712.119 255.277 cv
711.799 255.227 711.469 255.147 711.119 255.027 cv
711.119 254.097 li
711.449 254.277 711.779 254.407 712.099 254.487 cv
712.419 254.577 712.739 254.617 713.059 254.617 cv
713.479 254.617 713.809 254.547 714.039 254.407 cv
714.259 254.267 714.379 254.057 714.379 253.787 cv
714.379 253.547 714.289 253.357 714.129 253.227 cv
713.969 253.097 713.609 252.967 713.049 252.847 cv
712.739 252.777 li
712.179 252.657 711.769 252.477 711.529 252.237 cv
711.279 251.997 711.159 251.667 711.159 251.237 cv
711.159 250.727 711.339 250.327 711.699 250.047 cv
712.059 249.767 712.579 249.627 713.259 249.627 cv
713.589 249.627 713.899 249.657 714.199 249.707 cv
714.489 249.757 714.759 249.827 715.009 249.917 cv
f
717.709 254.397 mo
721.149 254.397 li
721.149 255.227 li
716.519 255.227 li
716.519 254.397 li
716.889 254.017 717.399 253.497 718.049 252.837 cv
718.689 252.187 719.099 251.767 719.269 251.577 cv
719.589 251.227 719.809 250.927 719.929 250.677 cv
720.049 250.437 720.119 250.187 720.119 249.947 cv
720.119 249.567 719.979 249.247 719.709 249.007 cv
719.439 248.767 719.089 248.637 718.649 248.637 cv
718.339 248.637 718.009 248.697 717.669 248.797 cv
717.329 248.907 716.959 249.067 716.569 249.287 cv
716.569 248.287 li
716.969 248.127 717.339 248.007 717.679 247.927 cv
718.019 247.847 718.339 247.807 718.629 247.807 cv
719.379 247.807 719.979 247.997 720.429 248.377 cv
720.879 248.757 721.109 249.257 721.109 249.887 cv
721.109 250.187 721.049 250.477 720.939 250.737 cv
720.829 251.007 720.629 251.327 720.329 251.687 cv
720.249 251.787 719.989 252.057 719.549 252.507 cv
719.109 252.957 718.499 253.587 717.709 254.397 cv
f
755.379 240.633 mo
755.379 244.133 li
f
755.379 240.633 mo
755.379 244.133 li
@
745.273 247.937 mo
751.433 247.937 li
751.433 248.767 li
748.843 248.767 li
748.843 255.227 li
747.853 255.227 li
747.853 248.767 li
745.273 248.767 li
745.273 247.937 li
f
752.643 254.397 mo
754.253 254.397 li
754.253 248.837 li
752.503 249.187 li
752.503 248.287 li
754.243 247.937 li
755.233 247.937 li
755.233 254.397 li
756.843 254.397 li
756.843 255.227 li
752.643 255.227 li
752.643 254.397 li
f
759.733 248.747 mo
759.733 254.417 li
760.923 254.417 li
761.923 254.417 762.663 254.197 763.133 253.737 cv
763.593 253.277 763.833 252.557 763.833 251.577 cv
763.833 250.597 763.593 249.887 763.133 249.427 cv
762.663 248.977 761.923 248.747 760.923 248.747 cv
759.733 248.747 li
758.743 247.937 mo
760.773 247.937 li
762.183 247.937 763.223 248.237 763.883 248.817 cv
764.543 249.407 764.873 250.327 764.873 251.577 cv
764.873 252.837 764.533 253.757 763.873 254.347 cv
763.213 254.937 762.173 255.227 760.773 255.227 cv
758.743 255.227 li
758.743 247.937 li
f
801.332 240.633 mo
801.332 244.133 li
f
801.332 240.633 mo
801.332 244.133 li
@
790.455 248.177 mo
790.455 249.137 li
790.075 248.957 789.725 248.827 789.395 248.737 cv
789.055 248.657 788.735 248.607 788.435 248.607 cv
787.895 248.607 787.475 248.717 787.185 248.917 cv
786.895 249.127 786.755 249.427 786.755 249.807 cv
786.755 250.127 786.845 250.377 787.045 250.537 cv
787.235 250.707 787.605 250.837 788.145 250.937 cv
788.745 251.057 li
789.475 251.197 790.015 251.447 790.365 251.797 cv
790.715 252.157 790.895 252.627 790.895 253.217 cv
790.895 253.927 790.655 254.457 790.185 254.817 cv
789.705 255.177 789.015 255.357 788.105 255.357 cv
787.755 255.357 787.385 255.317 786.995 255.247 cv
786.605 255.177 786.205 255.067 785.795 254.907 cv
785.795 253.887 li
786.195 254.117 786.585 254.287 786.965 254.397 cv
787.345 254.517 787.725 254.567 788.105 254.567 cv
788.665 254.567 789.095 254.457 789.405 254.237 cv
789.705 254.017 789.865 253.707 789.865 253.287 cv
789.865 252.927 789.755 252.647 789.535 252.447 cv
789.315 252.247 788.955 252.097 788.455 251.997 cv
787.855 251.877 li
787.115 251.737 786.585 251.507 786.255 251.187 cv
785.925 250.877 785.765 250.447 785.765 249.887 cv
785.765 249.247 785.985 248.737 786.445 248.367 cv
786.895 247.997 787.525 247.807 788.325 247.807 cv
788.665 247.807 789.005 247.837 789.365 247.897 cv
789.715 247.957 790.075 248.057 790.455 248.177 cv
f
793.285 248.207 mo
793.285 249.757 li
795.135 249.757 li
795.135 250.457 li
793.285 250.457 li
793.285 253.427 li
793.285 253.877 793.345 254.167 793.465 254.287 cv
793.585 254.417 793.835 254.477 794.215 254.477 cv
795.135 254.477 li
795.135 255.227 li
794.215 255.227 li
793.515 255.227 793.035 255.097 792.775 254.837 cv
792.515 254.577 792.385 254.107 792.385 253.427 cv
792.385 250.457 li
791.725 250.457 li
791.725 249.757 li
792.385 249.757 li
792.385 248.207 li
793.285 248.207 li
f
799.485 250.597 mo
799.385 250.537 799.275 250.497 799.155 250.467 cv
799.035 250.447 798.905 250.427 798.765 250.427 cv
798.255 250.427 797.865 250.597 797.595 250.927 cv
797.315 251.257 797.185 251.727 797.185 252.347 cv
797.185 255.227 li
796.285 255.227 li
796.285 249.757 li
797.185 249.757 li
797.185 250.607 li
797.365 250.277 797.615 250.027 797.915 249.867 cv
798.215 249.707 798.585 249.627 799.025 249.627 cv
799.235 249.637 li
799.305 249.647 799.385 249.657 799.485 249.677 cv
799.485 250.597 li
f
802.545 250.387 mo
802.065 250.387 801.685 250.577 801.405 250.957 cv
801.125 251.337 800.985 251.847 800.985 252.497 cv
800.985 253.157 801.115 253.667 801.395 254.047 cv
801.675 254.427 802.055 254.607 802.545 254.607 cv
803.025 254.607 803.405 254.427 803.685 254.047 cv
803.965 253.667 804.105 253.157 804.105 252.497 cv
804.105 251.857 803.965 251.337 803.685 250.957 cv
803.405 250.577 803.025 250.387 802.545 250.387 cv
802.545 249.627 mo
803.325 249.627 803.935 249.887 804.385 250.387 cv
804.825 250.897 805.055 251.597 805.055 252.497 cv
805.055 253.397 804.825 254.097 804.385 254.597 cv
803.935 255.107 803.325 255.357 802.545 255.357 cv
801.755 255.357 801.135 255.107 800.695 254.597 cv
800.255 254.097 800.035 253.397 800.035 252.497 cv
800.035 251.597 800.255 250.897 800.695 250.387 cv
801.135 249.887 801.755 249.627 802.545 249.627 cv
f
806.515 247.627 mo
807.415 247.627 li
807.415 252.117 li
810.095 249.757 li
811.245 249.757 li
808.345 252.317 li
811.365 255.227 li
810.195 255.227 li
807.415 252.557 li
807.415 255.227 li
806.515 255.227 li
806.515 247.627 li
f
817.015 252.267 mo
817.015 252.707 li
812.885 252.707 li
812.925 253.327 813.105 253.807 813.445 254.127 cv
813.775 254.447 814.235 254.607 814.835 254.607 cv
815.175 254.607 815.515 254.567 815.835 254.487 cv
816.155 254.407 816.485 254.277 816.805 254.097 cv
816.805 254.947 li
816.485 255.087 816.155 255.197 815.815 255.257 cv
815.475 255.317 815.125 255.357 814.785 255.357 cv
813.905 255.357 813.215 255.107 812.705 254.607 cv
812.195 254.107 811.945 253.417 811.945 252.547 cv
811.945 251.657 812.185 250.947 812.665 250.417 cv
813.145 249.897 813.805 249.627 814.625 249.627 cv
815.365 249.627 815.945 249.867 816.375 250.337 cv
816.795 250.817 817.015 251.457 817.015 252.267 cv
816.115 252.007 mo
816.105 251.517 815.965 251.127 815.705 250.827 cv
815.435 250.537 815.075 250.387 814.635 250.387 cv
814.135 250.387 813.735 250.537 813.435 250.817 cv
813.135 251.097 812.955 251.497 812.915 252.007 cv
816.115 252.007 li
f
43.1084 240.633 mo
39.6084 240.633 li
f
43.1084 240.633 mo
39.6084 240.633 li
@
23.3821 237.79 mo
22.8721 237.79 22.4921 238.04 22.2321 238.54 cv
21.9721 239.04 21.8521 239.79 21.8521 240.79 cv
21.8521 241.79 21.9721 242.54 22.2321 243.04 cv
22.4921 243.54 22.8721 243.79 23.3821 243.79 cv
23.8922 243.79 24.2721 243.54 24.5322 243.04 cv
24.7822 242.54 24.9121 241.79 24.9121 240.79 cv
24.9121 239.79 24.7822 239.04 24.5322 238.54 cv
24.2721 238.04 23.8922 237.79 23.3821 237.79 cv
23.3821 237.01 mo
24.1921 237.01 24.8121 237.34 25.2522 237.98 cv
25.6822 238.63 25.9021 239.57 25.9021 240.79 cv
25.9021 242.02 25.6822 242.96 25.2522 243.6 cv
24.8121 244.24 24.1921 244.56 23.3821 244.56 cv
22.5621 244.56 21.9322 244.24 21.5022 243.6 cv
21.0722 242.96 20.8622 242.02 20.8622 240.79 cv
20.8622 239.57 21.0722 238.63 21.5022 237.98 cv
21.9322 237.34 22.5621 237.01 23.3821 237.01 cv
f
27.6322 243.19 mo
28.6622 243.19 li
28.6622 244.43 li
27.6322 244.43 li
27.6322 243.19 li
f
32.9221 240.97 mo
32.4521 240.97 32.0821 241.1 31.8121 241.35 cv
31.5421 241.6 31.4121 241.94 31.4121 242.38 cv
31.4121 242.82 31.5421 243.17 31.8121 243.42 cv
32.0821 243.67 32.4521 243.79 32.9221 243.79 cv
33.3821 243.79 33.7521 243.67 34.0221 243.41 cv
34.2921 243.16 34.4321 242.82 34.4321 242.38 cv
34.4321 241.94 34.2921 241.6 34.0321 241.35 cv
33.7621 241.1 33.3921 240.97 32.9221 240.97 cv
31.9321 240.55 mo
31.5121 240.45 31.1821 240.25 30.9421 239.96 cv
30.7021 239.67 30.5921 239.32 30.5921 238.9 cv
30.5921 238.32 30.7921 237.86 31.2121 237.52 cv
31.6221 237.18 32.1921 237.01 32.9221 237.01 cv
33.6421 237.01 34.2121 237.18 34.6321 237.52 cv
35.0421 237.86 35.2521 238.32 35.2521 238.9 cv
35.2521 239.32 35.1321 239.67 34.8921 239.96 cv
34.6521 240.25 34.3321 240.45 33.9121 240.55 cv
34.3821 240.66 34.7521 240.88 35.0221 241.2 cv
35.2821 241.52 35.4221 241.92 35.4221 242.38 cv
35.4221 243.09 35.2021 243.63 34.7721 244 cv
34.3321 244.38 33.7221 244.56 32.9221 244.56 cv
32.1121 244.56 31.4921 244.38 31.0621 244 cv
30.6321 243.63 30.4221 243.09 30.4221 242.38 cv
30.4221 241.92 30.5521 241.52 30.8221 241.2 cv
31.0821 240.88 31.4521 240.66 31.9321 240.55 cv
31.5721 238.99 mo
31.5721 239.37 31.6821 239.67 31.9221 239.88 cv
32.1621 240.09 32.4921 240.19 32.9221 240.19 cv
33.3421 240.19 33.6721 240.09 33.9121 239.88 cv
34.1521 239.67 34.2721 239.37 34.2721 238.99 cv
34.2721 238.61 34.1521 238.32 33.9121 238.11 cv
33.6721 237.9 33.3421 237.79 32.9221 237.79 cv
32.4921 237.79 32.1621 237.9 31.9221 238.11 cv
31.6821 238.32 31.5721 238.61 31.5721 238.99 cv
f
43.1084 135.033 mo
39.6084 135.033 li
f
43.1084 135.033 mo
39.6084 135.033 li
@
23.3821 132.19 mo
22.8721 132.19 22.4921 132.44 22.2321 132.94 cv
21.9721 133.44 21.8521 134.19 21.8521 135.19 cv
21.8521 136.19 21.9721 136.94 22.2321 137.44 cv
22.4921 137.94 22.8721 138.19 23.3821 138.19 cv
23.8922 138.19 24.2721 137.94 24.5322 137.44 cv
24.7822 136.94 24.9121 136.19 24.9121 135.19 cv
24.9121 134.19 24.7822 133.44 24.5322 132.94 cv
24.2721 132.44 23.8922 132.19 23.3821 132.19 cv
23.3821 131.41 mo
24.1921 131.41 24.8121 131.74 25.2522 132.38 cv
25.6822 133.03 25.9021 133.97 25.9021 135.19 cv
25.9021 136.42 25.6822 137.36 25.2522 138 cv
24.8121 138.64 24.1921 138.96 23.3821 138.96 cv
22.5621 138.96 21.9322 138.64 21.5022 138 cv
21.0722 137.36 20.8622 136.42 20.8622 135.19 cv
20.8622 133.97 21.0722 133.03 21.5022 132.38 cv
21.9322 131.74 22.5621 131.41 23.3821 131.41 cv
f
27.6322 137.59 mo
28.6622 137.59 li
28.6622 138.83 li
27.6322 138.83 li
27.6322 137.59 li
f
30.8421 138.68 mo
30.8421 137.78 li
31.0821 137.9 31.3321 137.99 31.5921 138.05 cv
31.8421 138.11 32.0921 138.14 32.3421 138.14 cv
32.9821 138.14 33.4821 137.93 33.8221 137.49 cv
34.1621 137.05 34.3621 136.39 34.4221 135.49 cv
34.2221 135.77 33.9821 135.99 33.7021 136.14 cv
33.4121 136.29 33.0921 136.36 32.7421 136.36 cv
32.0021 136.36 31.4221 136.14 31.0021 135.7 cv
30.5821 135.26 30.3721 134.66 30.3721 133.89 cv
30.3721 133.15 30.5921 132.55 31.0321 132.09 cv
31.4721 131.64 32.0621 131.41 32.8021 131.41 cv
33.6421 131.41 34.2921 131.74 34.7321 132.38 cv
35.1721 133.03 35.4021 133.97 35.4021 135.19 cv
35.4021 136.35 35.1221 137.26 34.5821 137.94 cv
34.0321 138.62 33.3021 138.96 32.3821 138.96 cv
32.1321 138.96 31.8821 138.93 31.6321 138.89 cv
31.3721 138.85 31.1121 138.78 30.8421 138.68 cv
32.8021 135.59 mo
33.2421 135.59 33.5921 135.44 33.8521 135.14 cv
34.1121 134.84 34.2421 134.42 34.2421 133.89 cv
34.2421 133.37 34.1121 132.95 33.8521 132.65 cv
33.5921 132.35 33.2421 132.19 32.8021 132.19 cv
32.3621 132.19 32.0121 132.35 31.7521 132.65 cv
31.4921 132.95 31.3621 133.37 31.3621 133.89 cv
31.3621 134.42 31.4921 134.84 31.7521 135.14 cv
32.0121 135.44 32.3621 135.59 32.8021 135.59 cv
f
43.1084 29.433 mo
39.6084 29.433 li
f
43.1084 29.433 mo
39.6084 29.433 li
@
21.4421 32.3999 mo
23.0521 32.3999 li
23.0521 26.8399 li
21.3021 27.1899 li
21.3021 26.2899 li
23.0421 25.9399 li
24.0322 25.9399 li
24.0322 32.3999 li
25.6422 32.3999 li
25.6422 33.2299 li
21.4421 33.2299 li
21.4421 32.3999 li
f
27.6322 31.9899 mo
28.6622 31.9899 li
28.6622 33.2299 li
27.6322 33.2299 li
27.6322 31.9899 li
f
32.9221 26.5899 mo
32.4121 26.5899 32.0321 26.8399 31.7721 27.3399 cv
31.5121 27.8399 31.3921 28.5899 31.3921 29.5899 cv
31.3921 30.5899 31.5121 31.3399 31.7721 31.8399 cv
32.0321 32.3399 32.4121 32.5899 32.9221 32.5899 cv
33.4321 32.5899 33.8121 32.3399 34.0721 31.8399 cv
34.3221 31.3399 34.4521 30.5899 34.4521 29.5899 cv
34.4521 28.5899 34.3221 27.8399 34.0721 27.3399 cv
33.8121 26.8399 33.4321 26.5899 32.9221 26.5899 cv
32.9221 25.8099 mo
33.7321 25.8099 34.3521 26.1399 34.7921 26.7799 cv
35.2221 27.4299 35.4421 28.3699 35.4421 29.5899 cv
35.4421 30.8199 35.2221 31.7599 34.7921 32.3999 cv
34.3521 33.0399 33.7321 33.3599 32.9221 33.3599 cv
32.1021 33.3599 31.4721 33.0399 31.0421 32.3999 cv
30.6121 31.7599 30.4021 30.8199 30.4021 29.5899 cv
30.4021 28.3699 30.6121 27.4299 31.0421 26.7799 cv
31.4721 26.1399 32.1021 25.8099 32.9221 25.8099 cv
f
2.07965 137.733 mo
2.07965 136.053 li
13.0146 134.028 li
13.0146 135.573 li
10.2096 136.023 li
10.2096 140.943 li
13.0146 142.488 li
13.0146 144.033 li
2.07965 137.733 li
3.53465 137.193 mo
8.97964 140.268 li
8.97964 136.248 li
3.53465 137.193 li
f
5.12465 124.952 mo
6.45965 125.222 li
6.23465 125.552 6.05465 125.897 5.93465 126.257 cv
5.81465 126.617 5.75465 126.992 5.75465 127.382 cv
5.75465 127.817 5.82965 128.222 5.97964 128.612 cv
6.12965 129.002 6.35464 129.332 6.62465 129.587 cv
7.05965 130.007 7.55465 130.337 8.12465 130.562 cv
8.69465 130.802 9.29465 130.907 9.89465 130.907 cv
10.6446 130.907 11.1846 130.727 11.5446 130.352 cv
11.9046 129.992 12.0846 129.422 12.0846 128.672 cv
12.0846 128.312 12.0396 127.907 11.9196 127.487 cv
11.8147 127.067 11.6497 126.632 11.4096 126.182 cv
12.7447 126.437 li
12.9096 126.827 13.0146 127.232 13.0896 127.652 cv
13.1646 128.072 13.2096 128.492 13.2096 128.912 cv
13.2096 130.007 12.9397 130.847 12.3997 131.432 cv
11.8596 132.017 11.0947 132.302 10.0746 132.302 cv
9.23465 132.302 8.45465 132.152 7.73465 131.852 cv
7.01465 131.552 6.36964 131.087 5.79965 130.487 cv
5.40965 130.082 5.12465 129.602 4.91465 129.047 cv
4.71965 128.507 4.61465 127.892 4.61465 127.232 cv
4.61465 126.857 4.65965 126.482 4.74965 126.107 cv
4.83965 125.732 4.95965 125.342 5.12465 124.952 cv
f
5.12465 116.705 mo
6.45965 116.975 li
6.23465 117.305 6.05465 117.65 5.93465 118.01 cv
5.81465 118.37 5.75465 118.745 5.75465 119.135 cv
5.75465 119.57 5.82965 119.975 5.97964 120.365 cv
6.12965 120.755 6.35464 121.085 6.62465 121.34 cv
7.05965 121.76 7.55465 122.09 8.12465 122.315 cv
8.69465 122.555 9.29465 122.66 9.89465 122.66 cv
10.6446 122.66 11.1846 122.48 11.5446 122.105 cv
11.9046 121.745 12.0846 121.175 12.0846 120.425 cv
12.0846 120.065 12.0396 119.66 11.9196 119.24 cv
11.8147 118.82 11.6497 118.385 11.4096 117.935 cv
12.7447 118.19 li
12.9096 118.58 13.0146 118.985 13.0896 119.405 cv
13.1646 119.825 13.2096 120.245 13.2096 120.665 cv
13.2096 121.76 12.9397 122.6 12.3997 123.185 cv
11.8596 123.77 11.0947 124.055 10.0746 124.055 cv
9.23465 124.055 8.45465 123.905 7.73465 123.605 cv
7.01465 123.305 6.36964 122.84 5.79965 122.24 cv
5.40965 121.835 5.12465 121.355 4.91465 120.8 cv
4.71965 120.26 4.61465 119.645 4.61465 118.985 cv
4.61465 118.61 4.65965 118.235 4.74965 117.86 cv
4.83965 117.485 4.95965 117.095 5.12465 116.705 cv
f
1 lw
2 lc
54.5966 42.633 mo
77.5731 42.633 li
54.5966 42.633 li
@
66.0849 42.633 mo
66.0849 42.633 li
@
66.0849 42.633 mo
66.0849 42.633 li
@
60.3407 42.633 mo
71.829 42.633 li
@
60.3407 42.633 mo
71.829 42.633 li
@
gsave
62.5849 63.733 mo
69.5849 63.733 li
69.5849 56.733 li
62.5849 56.733 li
cp
clp
0 lc
66.0849 63.233 mo
66.8805 63.233 67.6436 62.9169 68.2062 62.3543 cv
68.7688 61.7917 69.0849 61.0286 69.0849 60.233 cv
69.0849 59.4374 68.7688 58.6742 68.2062 58.1117 cv
67.6436 57.5491 66.8805 57.233 66.0849 57.233 cv
65.2893 57.233 64.5261 57.5491 63.9635 58.1117 cv
63.401 58.6742 63.0849 59.4374 63.0849 60.233 cv
63.0849 61.0286 63.401 61.7917 63.9635 62.3543 cv
64.5261 62.9169 65.2893 63.233 66.0849 63.233 cv
cp
@
grestore
gsave
62.5849 32.933 mo
69.5849 32.933 li
69.5849 25.933 li
62.5849 25.933 li
cp
clp
0 lc
66.0849 32.433 mo
66.8805 32.433 67.6436 32.1169 68.2062 31.5543 cv
68.7688 30.9917 69.0849 30.2286 69.0849 29.433 cv
69.0849 28.6374 68.7688 27.8742 68.2062 27.3117 cv
67.6436 26.7491 66.8805 26.433 66.0849 26.433 cv
65.2893 26.433 64.5261 26.7491 63.9635 27.3117 cv
63.401 27.8742 63.0849 28.6374 63.0849 29.433 cv
63.0849 30.2286 63.401 30.9917 63.9635 31.5543 cv
64.5261 32.1169 65.2893 32.433 66.0849 32.433 cv
cp
@
grestore
100.55 50.553 mo
123.526 50.553 li
123.526 49.833 li
100.55 49.833 li
100.55 50.553 li
@
112.038 50.553 mo
112.038 50.553 li
@
112.038 49.833 mo
112.038 49.593 li
@
106.294 50.553 mo
117.782 50.553 li
@
106.294 49.593 mo
117.782 49.593 li
@
0 lc
112.038 62.193 mo
112.833 62.193 113.597 61.8769 114.159 61.3143 cv
114.722 60.7517 115.038 59.9886 115.038 59.193 cv
115.038 58.3974 114.722 57.6342 114.159 57.0717 cv
113.597 56.5091 112.833 56.193 112.038 56.193 cv
111.242 56.193 110.479 56.5091 109.916 57.0717 cv
109.354 57.6342 109.038 58.3974 109.038 59.193 cv
109.038 59.9886 109.354 60.7517 109.916 61.3143 cv
110.479 61.8769 111.242 62.193 112.038 62.193 cv
cp
@
2 lc
146.503 64.633 mo
169.479 64.633 li
169.479 47.033 li
146.503 47.033 li
146.503 64.633 li
@
157.991 64.633 mo
157.991 79.7187 li
@
157.991 47.033 mo
157.991 44.5187 li
@
152.247 79.7187 mo
163.735 79.7187 li
@
152.247 44.5187 mo
163.735 44.5187 li
@
192.455 44.0473 mo
215.432 44.0473 li
215.432 29.433 li
192.455 29.433 li
192.455 44.0473 li
@
203.944 44.0473 mo
203.944 47.033 li
@
203.944 29.433 mo
203.944 29.433 li
@
198.2 47.033 mo
209.688 47.033 li
@
198.2 29.433 mo
209.688 29.433 li
@
238.408 106.789 mo
261.385 106.789 li
261.385 90.8389 li
238.408 90.8389 li
238.408 106.789 li
@
249.897 106.789 mo
249.897 120.668 li
@
249.897 90.8389 mo
249.897 83.6997 li
@
244.153 120.668 mo
255.641 120.668 li
@
244.153 83.6997 mo
255.641 83.6997 li
@
284.361 35.0901 mo
307.338 35.0901 li
307.338 29.433 li
284.361 29.433 li
284.361 35.0901 li
@
295.85 35.0901 mo
295.85 38.233 li
@
295.85 29.433 mo
295.85 29.433 li
@
290.105 38.233 mo
301.594 38.233 li
@
290.105 29.433 mo
301.594 29.433 li
@
330.314 165.966 mo
353.291 165.966 li
353.291 148.9 li
330.314 148.9 li
330.314 165.966 li
@
341.803 165.966 mo
341.803 176.633 li
@
341.803 148.9 mo
341.803 131.833 li
@
336.058 176.633 mo
347.547 176.633 li
@
336.058 131.833 mo
347.547 131.833 li
@
376.267 119.73 mo
399.244 119.73 li
399.244 107.666 li
376.267 107.666 li
376.267 119.73 li
@
387.755 119.73 mo
387.755 129.714 li
@
387.755 107.666 mo
387.755 104.571 li
@
382.011 129.714 mo
393.5 129.714 li
@
382.011 104.571 mo
393.5 104.571 li
@
422.22 73.9463 mo
445.197 73.9463 li
445.197 61.773 li
422.22 61.773 li
422.22 73.9463 li
@
433.708 73.9463 mo
433.708 87.2197 li
@
433.708 61.773 mo
433.708 50.553 li
@
427.964 87.2197 mo
439.453 87.2197 li
@
427.964 50.553 mo
439.453 50.553 li
@
468.173 47.033 mo
491.15 47.033 li
468.173 47.033 li
@
479.661 47.033 mo
479.661 47.033 li
@
479.661 47.033 mo
479.661 47.033 li
@
473.917 47.033 mo
485.405 47.033 li
@
473.917 47.033 mo
485.405 47.033 li
@
gsave
476.161 68.133 mo
483.161 68.133 li
483.161 61.133 li
476.161 61.133 li
cp
clp
0 lc
479.661 67.633 mo
480.457 67.633 481.22 67.3169 481.783 66.7543 cv
482.345 66.1917 482.661 65.4286 482.661 64.633 cv
482.661 63.8374 482.345 63.0743 481.783 62.5117 cv
481.22 61.9491 480.457 61.633 479.661 61.633 cv
478.866 61.633 478.103 61.9491 477.54 62.5117 cv
476.977 63.0743 476.661 63.8374 476.661 64.633 cv
476.661 65.4286 476.977 66.1917 477.54 66.7543 cv
478.103 67.3169 478.866 67.633 479.661 67.633 cv
cp
@
grestore
gsave
476.161 68.133 mo
483.161 68.133 li
483.161 61.133 li
476.161 61.133 li
cp
clp
0 lc
479.661 67.633 mo
480.457 67.633 481.22 67.3169 481.783 66.7543 cv
482.345 66.1917 482.661 65.4286 482.661 64.633 cv
482.661 63.8374 482.345 63.0743 481.783 62.5117 cv
481.22 61.9491 480.457 61.633 479.661 61.633 cv
478.866 61.633 478.103 61.9491 477.54 62.5117 cv
476.977 63.0743 476.661 63.8374 476.661 64.633 cv
476.661 65.4286 476.977 66.1917 477.54 66.7543 cv
478.103 67.3169 478.866 67.633 479.661 67.633 cv
cp
@
grestore
gsave
476.161 48.0187 mo
483.161 48.0187 li
483.161 41.0187 li
476.161 41.0187 li
cp
clp
0 lc
479.661 47.5187 mo
480.457 47.5187 481.22 47.2026 481.783 46.64 cv
482.345 46.0774 482.661 45.3143 482.661 44.5187 cv
482.661 43.7231 482.345 42.96 481.783 42.3974 cv
481.22 41.8348 480.457 41.5187 479.661 41.5187 cv
478.866 41.5187 478.103 41.8348 477.54 42.3974 cv
476.977 42.96 476.661 43.7231 476.661 44.5187 cv
476.661 45.3143 476.977 46.0774 477.54 46.64 cv
478.103 47.2026 478.866 47.5187 479.661 47.5187 cv
cp
@
grestore
514.126 29.433 mo
537.103 29.433 li
514.126 29.433 li
@
525.614 29.433 mo
525.614 29.433 li
@
525.614 29.433 mo
525.614 29.433 li
@
519.87 29.433 mo
531.358 29.433 li
@
519.87 29.433 mo
531.358 29.433 li
@
560.079 29.433 mo
583.055 29.433 li
560.079 29.433 li
@
571.567 29.433 mo
571.567 29.433 li
@
571.567 29.433 mo
571.567 29.433 li
@
565.823 29.433 mo
577.311 29.433 li
@
565.823 29.433 mo
577.311 29.433 li
@
606.032 29.433 mo
629.008 29.433 li
606.032 29.433 li
@
617.52 29.433 mo
617.52 29.433 li
@
617.52 29.433 mo
617.52 29.433 li
@
611.776 29.433 mo
623.264 29.433 li
@
611.776 29.433 mo
623.264 29.433 li
@
651.985 58.6616 mo
674.961 58.6616 li
674.961 52.0616 li
651.985 52.0616 li
651.985 58.6616 li
@
663.473 58.6616 mo
663.473 66.2044 li
@
663.473 52.0616 mo
663.473 51.1187 li
@
657.729 66.2044 mo
669.217 66.2044 li
@
657.729 51.1187 mo
669.217 51.1187 li
@
697.938 29.433 mo
720.914 29.433 li
697.938 29.433 li
@
709.426 29.433 mo
709.426 29.433 li
@
709.426 29.433 mo
709.426 29.433 li
@
703.682 29.433 mo
715.17 29.433 li
@
703.682 29.433 mo
715.17 29.433 li
@
743.891 153.406 mo
766.867 153.406 li
766.867 126.153 li
743.891 126.153 li
743.891 153.406 li
@
755.379 153.406 mo
755.379 156.58 li
@
755.379 126.153 mo
755.379 110.5 li
@
749.635 156.58 mo
761.123 156.58 li
@
749.635 110.5 mo
761.123 110.5 li
@
789.844 29.433 mo
812.82 29.433 li
789.844 29.433 li
@
801.332 29.433 mo
801.332 29.433 li
@
801.332 29.433 mo
801.332 29.433 li
@
795.588 29.433 mo
807.076 29.433 li
@
795.588 29.433 mo
807.076 29.433 li
@
54.5966 42.633 mo
77.5731 42.633 li
/1 
[/DeviceCMYK] /CSA add_res
0 .642573 1 0 cmyk
@
100.55 50.553 mo
123.526 50.553 li
@
146.503 62.1187 mo
169.479 62.1187 li
@
192.455 36.033 mo
215.432 36.033 li
@
238.408 99.4447 mo
261.385 99.4447 li
@
284.361 29.433 mo
307.338 29.433 li
@
330.314 157.433 mo
353.291 157.433 li
@
376.267 113.758 mo
399.244 113.758 li
@
422.22 63.753 mo
445.197 63.753 li
@
468.173 47.033 mo
491.15 47.033 li
@
514.126 29.433 mo
537.103 29.433 li
@
560.079 29.433 mo
583.055 29.433 li
@
606.032 29.433 mo
629.008 29.433 li
@
651.985 57.2473 mo
674.961 57.2473 li
@
697.938 29.433 mo
720.914 29.433 li
@
743.891 136.26 mo
766.867 136.26 li
@
789.844 29.433 mo
812.82 29.433 li
@
.8 lw
0 lj
43.1084 240.633 mo
43.1084 18.873 li
1 /0 /CSD get_res sepcs
1 sep
@
824.308 240.633 mo
824.308 18.873 li
@
43.1084 240.633 mo
824.308 240.633 li
@
43.1084 18.873 mo
824.308 18.873 li
@
207.68 2.30761 mo
216.304 2.30761 li
216.304 3.46961 li
212.678 3.46961 li
212.678 12.5136 li
211.292 12.5136 li
211.292 3.46961 li
207.68 3.46961 li
207.68 2.30761 li
f
223.946 7.89361 mo
223.946 12.5136 li
222.686 12.5136 li
222.686 7.93561 li
222.686 7.20761 222.532 6.67561 222.252 6.31161 cv
221.972 5.94761 221.552 5.76561 220.992 5.76561 cv
220.306 5.76561 219.774 5.98961 219.382 6.42361 cv
218.99 6.85761 218.794 7.44561 218.794 8.18761 cv
218.794 12.5136 li
217.534 12.5136 li
217.534 1.87361 li
218.794 1.87361 li
218.794 6.04561 li
219.088 5.59761 219.438 5.24761 219.858 5.02361 cv
220.264 4.79961 220.74 4.67361 221.272 4.67361 cv
222.14 4.67361 222.812 4.95361 223.26 5.49961 cv
223.708 6.04561 223.946 6.84361 223.946 7.89361 cv
f
233.001 8.36961 mo
233.001 8.98561 li
227.219 8.98561 li
227.275 9.85361 227.527 10.5256 228.003 10.9736 cv
228.465 11.4216 229.109 11.6456 229.949 11.6456 cv
230.425 11.6456 230.901 11.5896 231.349 11.4776 cv
231.797 11.3656 232.259 11.1836 232.707 10.9316 cv
232.707 12.1216 li
232.259 12.3176 231.797 12.4716 231.321 12.5556 cv
230.845 12.6396 230.355 12.6956 229.879 12.6956 cv
228.647 12.6956 227.681 12.3456 226.967 11.6456 cv
226.253 10.9456 225.903 9.97961 225.903 8.76161 cv
225.903 7.51561 226.239 6.52161 226.911 5.77961 cv
227.583 5.05161 228.507 4.67361 229.655 4.67361 cv
230.691 4.67361 231.503 5.00961 232.105 5.66761 cv
232.693 6.33961 233.001 7.23561 233.001 8.36961 cv
231.741 8.00561 mo
231.727 7.31961 231.531 6.77361 231.167 6.35361 cv
230.789 5.94761 230.285 5.73761 229.669 5.73761 cv
228.969 5.73761 228.409 5.94761 227.989 6.33961 cv
227.569 6.73161 227.317 7.29161 227.261 8.00561 cv
231.741 8.00561 li
f
244.553 6.01761 mo
244.553 1.87361 li
245.813 1.87361 li
245.813 12.5136 li
244.553 12.5136 li
244.553 11.3656 li
244.287 11.8276 243.951 12.1636 243.545 12.3736 cv
243.139 12.5836 242.663 12.6956 242.103 12.6956 cv
241.179 12.6956 240.423 12.3316 239.835 11.6036 cv
239.247 10.8756 238.967 9.89561 238.967 8.69161 cv
238.967 7.48761 239.247 6.52161 239.835 5.77961 cv
240.423 5.05161 241.179 4.67361 242.103 4.67361 cv
242.663 4.67361 243.139 4.78561 243.545 5.00961 cv
243.951 5.23361 244.287 5.56961 244.553 6.01761 cv
240.269 8.69161 mo
240.269 9.61561 240.451 10.3436 240.829 10.8756 cv
241.207 11.4076 241.739 11.6596 242.411 11.6596 cv
243.069 11.6596 243.587 11.4076 243.979 10.8756 cv
244.357 10.3436 244.553 9.61561 244.553 8.69161 cv
244.553 7.76761 244.357 7.05361 243.979 6.52161 cv
243.587 5.98961 243.069 5.72361 242.411 5.72361 cv
241.739 5.72361 241.207 5.98961 240.829 6.52161 cv
240.451 7.05361 240.269 7.76761 240.269 8.69161 cv
f
248.399 4.85561 mo
249.659 4.85561 li
249.659 12.5136 li
248.399 12.5136 li
248.399 4.85561 li
248.399 1.87361 mo
249.659 1.87361 li
249.659 3.46961 li
248.399 3.46961 li
248.399 1.87361 li
f
257.175 5.07961 mo
257.175 6.26961 li
256.811 6.10161 256.447 5.96161 256.069 5.86361 cv
255.677 5.77961 255.285 5.72361 254.879 5.72361 cv
254.249 5.72361 253.773 5.82161 253.465 6.01761 cv
253.157 6.21361 253.003 6.49361 253.003 6.87161 cv
253.003 7.16561 253.115 7.38961 253.339 7.55761 cv
253.563 7.72561 254.011 7.89361 254.683 8.03361 cv
255.117 8.13161 li
256.013 8.32761 256.643 8.60761 257.021 8.94361 cv
257.385 9.29361 257.581 9.78361 257.581 10.3996 cv
257.581 11.1136 257.301 11.6736 256.741 12.0796 cv
256.181 12.4996 255.397 12.6956 254.417 12.6956 cv
253.997 12.6956 253.577 12.6536 253.129 12.5836 cv
252.681 12.5136 252.219 12.4016 251.729 12.2336 cv
251.729 10.9316 li
252.191 11.1836 252.653 11.3656 253.101 11.4776 cv
253.549 11.6036 253.997 11.6596 254.445 11.6596 cv
255.033 11.6596 255.495 11.5616 255.817 11.3656 cv
256.125 11.1696 256.293 10.8756 256.293 10.4976 cv
256.293 10.1616 256.167 9.89561 255.943 9.71361 cv
255.719 9.53161 255.215 9.34961 254.431 9.18161 cv
253.997 9.08361 li
253.213 8.91561 252.639 8.66361 252.303 8.32761 cv
251.953 7.99161 251.785 7.52961 251.785 6.92761 cv
251.785 6.21361 252.037 5.65361 252.541 5.26161 cv
253.045 4.86961 253.773 4.67361 254.725 4.67361 cv
255.187 4.67361 255.621 4.71561 256.041 4.78561 cv
256.447 4.85561 256.825 4.95361 257.175 5.07961 cv
f
260.829 2.68561 mo
260.829 4.85561 li
263.419 4.85561 li
263.419 5.83561 li
260.829 5.83561 li
260.829 9.99361 li
260.829 10.6236 260.913 11.0296 261.081 11.1976 cv
261.249 11.3796 261.599 11.4636 262.131 11.4636 cv
263.419 11.4636 li
263.419 12.5136 li
262.131 12.5136 li
261.151 12.5136 260.479 12.3316 260.115 11.9676 cv
259.751 11.6036 259.569 10.9456 259.569 9.99361 cv
259.569 5.83561 li
258.645 5.83561 li
258.645 4.85561 li
259.569 4.85561 li
259.569 2.68561 li
260.829 2.68561 li
f
269.51 6.03161 mo
269.37 5.94761 269.216 5.89161 269.048 5.84961 cv
268.88 5.82161 268.698 5.79361 268.502 5.79361 cv
267.788 5.79361 267.242 6.03161 266.864 6.49361 cv
266.472 6.95561 266.29 7.61361 266.29 8.48161 cv
266.29 12.5136 li
265.03 12.5136 li
265.03 4.85561 li
266.29 4.85561 li
266.29 6.04561 li
266.542 5.58361 266.892 5.23361 267.312 5.00961 cv
267.732 4.78561 268.25 4.67361 268.866 4.67361 cv
268.95 4.67361 269.048 4.68761 269.16 4.68761 cv
269.258 4.70161 269.37 4.71561 269.51 4.74361 cv
269.51 6.03161 li
f
270.828 4.85561 mo
272.088 4.85561 li
272.088 12.5136 li
270.828 12.5136 li
270.828 4.85561 li
270.828 1.87361 mo
272.088 1.87361 li
272.088 3.46961 li
270.828 3.46961 li
270.828 1.87361 li
f
280.22 8.69161 mo
280.22 7.76761 280.024 7.05361 279.646 6.52161 cv
279.254 5.98961 278.736 5.72361 278.078 5.72361 cv
277.406 5.72361 276.888 5.98961 276.51 6.52161 cv
276.118 7.05361 275.936 7.76761 275.936 8.69161 cv
275.936 9.61561 276.118 10.3436 276.51 10.8756 cv
276.888 11.4076 277.406 11.6596 278.078 11.6596 cv
278.736 11.6596 279.254 11.4076 279.646 10.8756 cv
280.024 10.3436 280.22 9.61561 280.22 8.69161 cv
275.936 6.01761 mo
276.188 5.56961 276.524 5.23361 276.93 5.00961 cv
277.336 4.78561 277.826 4.67361 278.386 4.67361 cv
279.31 4.67361 280.066 5.05161 280.654 5.77961 cv
281.228 6.52161 281.522 7.48761 281.522 8.69161 cv
281.522 9.89561 281.228 10.8756 280.654 11.6036 cv
280.066 12.3316 279.31 12.6956 278.386 12.6956 cv
277.826 12.6956 277.336 12.5836 276.93 12.3736 cv
276.524 12.1636 276.188 11.8276 275.936 11.3656 cv
275.936 12.5136 li
274.676 12.5136 li
274.676 1.87361 li
275.936 1.87361 li
275.936 6.01761 li
f
283.478 9.48961 mo
283.478 4.85561 li
284.738 4.85561 li
284.738 9.44761 li
284.738 10.1756 284.878 10.7076 285.158 11.0716 cv
285.438 11.4356 285.858 11.6176 286.432 11.6176 cv
287.104 11.6176 287.65 11.4076 288.042 10.9736 cv
288.434 10.5396 288.63 9.95161 288.63 9.19561 cv
288.63 4.85561 li
289.89 4.85561 li
289.89 12.5136 li
288.63 12.5136 li
288.63 11.3376 li
288.322 11.8136 287.958 12.1496 287.566 12.3736 cv
287.16 12.5836 286.698 12.6956 286.166 12.6956 cv
285.284 12.6956 284.612 12.4296 284.164 11.8836 cv
283.702 11.3516 283.478 10.5536 283.478 9.48961 cv
286.642 4.67361 mo
286.642 4.67361 li
f
293.724 2.68561 mo
293.724 4.85561 li
296.314 4.85561 li
296.314 5.83561 li
293.724 5.83561 li
293.724 9.99361 li
293.724 10.6236 293.808 11.0296 293.976 11.1976 cv
294.144 11.3796 294.494 11.4636 295.026 11.4636 cv
296.314 11.4636 li
296.314 12.5136 li
295.026 12.5136 li
294.046 12.5136 293.374 12.3316 293.01 11.9676 cv
292.646 11.6036 292.464 10.9456 292.464 9.99361 cv
292.464 5.83561 li
291.54 5.83561 li
291.54 4.85561 li
292.464 4.85561 li
292.464 2.68561 li
293.724 2.68561 li
f
297.967 4.85561 mo
299.227 4.85561 li
299.227 12.5136 li
297.967 12.5136 li
297.967 4.85561 li
297.967 1.87361 mo
299.227 1.87361 li
299.227 3.46961 li
297.967 3.46961 li
297.967 1.87361 li
f
304.824 5.73761 mo
304.152 5.73761 303.62 6.00361 303.228 6.53561 cv
302.836 7.06761 302.64 7.78161 302.64 8.69161 cv
302.64 9.61561 302.822 10.3296 303.214 10.8616 cv
303.606 11.3936 304.138 11.6456 304.824 11.6456 cv
305.496 11.6456 306.028 11.3936 306.42 10.8616 cv
306.812 10.3296 307.008 9.61561 307.008 8.69161 cv
307.008 7.79561 306.812 7.06761 306.42 6.53561 cv
306.028 6.00361 305.496 5.73761 304.824 5.73761 cv
304.824 4.67361 mo
305.916 4.67361 306.77 5.03761 307.4 5.73761 cv
308.016 6.45161 308.338 7.43161 308.338 8.69161 cv
308.338 9.95161 308.016 10.9316 307.4 11.6316 cv
306.77 12.3456 305.916 12.6956 304.824 12.6956 cv
303.718 12.6956 302.85 12.3456 302.234 11.6316 cv
301.618 10.9316 301.31 9.95161 301.31 8.69161 cv
301.31 7.43161 301.618 6.45161 302.234 5.73761 cv
302.85 5.03761 303.718 4.67361 304.824 4.67361 cv
f
316.792 7.89361 mo
316.792 12.5136 li
315.532 12.5136 li
315.532 7.93561 li
315.532 7.20761 315.378 6.67561 315.098 6.31161 cv
314.818 5.94761 314.398 5.76561 313.838 5.76561 cv
313.152 5.76561 312.62 5.98961 312.228 6.42361 cv
311.836 6.85761 311.64 7.44561 311.64 8.18761 cv
311.64 12.5136 li
310.38 12.5136 li
310.38 4.85561 li
311.64 4.85561 li
311.64 6.04561 li
311.934 5.59761 312.284 5.24761 312.704 5.02361 cv
313.11 4.79961 313.586 4.67361 314.118 4.67361 cv
314.986 4.67361 315.658 4.95361 316.106 5.49961 cv
316.554 6.04561 316.792 6.84361 316.792 7.89361 cv
f
326.713 5.73761 mo
326.041 5.73761 325.509 6.00361 325.117 6.53561 cv
324.725 7.06761 324.529 7.78161 324.529 8.69161 cv
324.529 9.61561 324.711 10.3296 325.103 10.8616 cv
325.495 11.3936 326.027 11.6456 326.713 11.6456 cv
327.385 11.6456 327.917 11.3936 328.309 10.8616 cv
328.701 10.3296 328.897 9.61561 328.897 8.69161 cv
328.897 7.79561 328.701 7.06761 328.309 6.53561 cv
327.917 6.00361 327.385 5.73761 326.713 5.73761 cv
326.713 4.67361 mo
327.805 4.67361 328.659 5.03761 329.289 5.73761 cv
329.905 6.45161 330.227 7.43161 330.227 8.69161 cv
330.227 9.95161 329.905 10.9316 329.289 11.6316 cv
328.659 12.3456 327.805 12.6956 326.713 12.6956 cv
325.607 12.6956 324.739 12.3456 324.123 11.6316 cv
323.507 10.9316 323.199 9.95161 323.199 8.69161 cv
323.199 7.43161 323.507 6.45161 324.123 5.73761 cv
324.739 5.03761 325.607 4.67361 326.713 4.67361 cv
f
336.189 1.87361 mo
336.189 2.92361 li
334.985 2.92361 li
334.537 2.92361 334.215 3.02161 334.047 3.20361 cv
333.865 3.38561 333.781 3.70761 333.781 4.18361 cv
333.781 4.85561 li
335.853 4.85561 li
335.853 5.83561 li
333.781 5.83561 li
333.781 12.5136 li
332.521 12.5136 li
332.521 5.83561 li
331.317 5.83561 li
331.317 4.85561 li
332.521 4.85561 li
332.521 4.32361 li
332.521 3.48361 332.717 2.85361 333.109 2.46161 cv
333.501 2.06961 334.131 1.87361 334.999 1.87361 cv
336.189 1.87361 li
f
345.525 2.30761 mo
347.093 2.30761 li
348.983 12.5136 li
347.541 12.5136 li
347.121 9.89561 li
342.529 9.89561 li
341.087 12.5136 li
339.645 12.5136 li
345.525 2.30761 li
346.029 3.66561 mo
343.159 8.74761 li
346.911 8.74761 li
346.029 3.66561 li
f
357.455 5.14961 mo
357.203 6.39561 li
356.895 6.18561 356.573 6.01761 356.237 5.90561 cv
355.901 5.79361 355.551 5.73761 355.187 5.73761 cv
354.781 5.73761 354.403 5.80761 354.039 5.94761 cv
353.675 6.08761 353.367 6.29761 353.129 6.54961 cv
352.737 6.95561 352.429 7.41761 352.219 7.94961 cv
351.995 8.48161 351.897 9.04161 351.897 9.60161 cv
351.897 10.3016 352.065 10.8056 352.415 11.1416 cv
352.751 11.4776 353.283 11.6456 353.983 11.6456 cv
354.319 11.6456 354.697 11.6036 355.089 11.4916 cv
355.481 11.3936 355.887 11.2396 356.307 11.0156 cv
356.069 12.2616 li
355.705 12.4156 355.327 12.5136 354.935 12.5836 cv
354.543 12.6536 354.151 12.6956 353.759 12.6956 cv
352.737 12.6956 351.953 12.4436 351.407 11.9396 cv
350.861 11.4356 350.595 10.7216 350.595 9.76961 cv
350.595 8.98561 350.735 8.25761 351.015 7.58561 cv
351.295 6.91361 351.729 6.31161 352.289 5.77961 cv
352.667 5.41561 353.115 5.14961 353.633 4.95361 cv
354.137 4.77161 354.711 4.67361 355.327 4.67361 cv
355.677 4.67361 356.027 4.71561 356.377 4.79961 cv
356.727 4.88361 357.091 4.99561 357.455 5.14961 cv
f
365.152 5.14961 mo
364.9 6.39561 li
364.592 6.18561 364.27 6.01761 363.934 5.90561 cv
363.598 5.79361 363.248 5.73761 362.884 5.73761 cv
362.478 5.73761 362.1 5.80761 361.736 5.94761 cv
361.372 6.08761 361.064 6.29761 360.826 6.54961 cv
360.434 6.95561 360.126 7.41761 359.916 7.94961 cv
359.692 8.48161 359.594 9.04161 359.594 9.60161 cv
359.594 10.3016 359.762 10.8056 360.112 11.1416 cv
360.448 11.4776 360.98 11.6456 361.68 11.6456 cv
362.016 11.6456 362.394 11.6036 362.786 11.4916 cv
363.178 11.3936 363.584 11.2396 364.004 11.0156 cv
363.766 12.2616 li
363.402 12.4156 363.024 12.5136 362.632 12.5836 cv
362.24 12.6536 361.848 12.6956 361.456 12.6956 cv
360.434 12.6956 359.65 12.4436 359.104 11.9396 cv
358.558 11.4356 358.292 10.7216 358.292 9.76961 cv
358.292 8.98561 358.432 8.25761 358.712 7.58561 cv
358.992 6.91361 359.426 6.31161 359.986 5.77961 cv
360.364 5.41561 360.812 5.14961 361.33 4.95361 cv
361.834 4.77161 362.408 4.67361 363.024 4.67361 cv
363.374 4.67361 363.724 4.71561 364.074 4.79961 cv
364.424 4.88361 364.788 4.99561 365.152 5.14961 cv
f
370.215 4.85561 mo
371.545 4.85561 li
373.939 11.2816 li
376.333 4.85561 li
377.663 4.85561 li
374.793 12.5136 li
373.085 12.5136 li
370.215 4.85561 li
f
382.882 8.66361 mo
381.86 8.66361 381.16 8.78961 380.768 9.01361 cv
380.376 9.25161 380.18 9.64361 380.18 10.2036 cv
380.18 10.6516 380.32 11.0156 380.614 11.2676 cv
380.908 11.5336 381.314 11.6596 381.818 11.6596 cv
382.518 11.6596 383.078 11.4216 383.498 10.9176 cv
383.918 10.4276 384.128 9.76961 384.128 8.94361 cv
384.128 8.66361 li
382.882 8.66361 li
385.388 8.14561 mo
385.388 12.5136 li
384.128 12.5136 li
384.128 11.3516 li
383.834 11.8276 383.47 12.1636 383.05 12.3736 cv
382.63 12.5836 382.098 12.6956 381.482 12.6956 cv
380.698 12.6956 380.068 12.4856 379.606 12.0516 cv
379.144 11.6176 378.92 11.0296 378.92 10.2876 cv
378.92 9.43361 379.2 8.78961 379.788 8.34161 cv
380.362 7.90761 381.216 7.68361 382.364 7.68361 cv
384.128 7.68361 li
384.128 7.55761 li
384.128 6.98361 383.932 6.53561 383.554 6.21361 cv
383.176 5.90561 382.644 5.73761 381.958 5.73761 cv
381.51 5.73761 381.09 5.79361 380.67 5.90561 cv
380.25 6.01761 379.858 6.17161 379.48 6.36761 cv
379.48 5.20561 li
379.928 5.03761 380.376 4.89761 380.81 4.81361 cv
381.244 4.72961 381.664 4.67361 382.084 4.67361 cv
383.19 4.67361 384.016 4.96761 384.562 5.54161 cv
385.108 6.11561 385.388 6.98361 385.388 8.14561 cv
f
387.976 1.87361 mo
389.236 1.87361 li
389.236 12.5136 li
387.976 12.5136 li
387.976 1.87361 li
f
391.739 9.48961 mo
391.739 4.85561 li
392.999 4.85561 li
392.999 9.44761 li
392.999 10.1756 393.139 10.7076 393.419 11.0716 cv
393.699 11.4356 394.119 11.6176 394.693 11.6176 cv
395.365 11.6176 395.911 11.4076 396.303 10.9736 cv
396.695 10.5396 396.891 9.95161 396.891 9.19561 cv
396.891 4.85561 li
398.151 4.85561 li
398.151 12.5136 li
396.891 12.5136 li
396.891 11.3376 li
396.583 11.8136 396.219 12.1496 395.827 12.3736 cv
395.421 12.5836 394.959 12.6956 394.427 12.6956 cv
393.545 12.6956 392.873 12.4296 392.425 11.8836 cv
391.963 11.3516 391.739 10.5536 391.739 9.48961 cv
394.903 4.67361 mo
394.903 4.67361 li
f
407.29 8.36961 mo
407.29 8.98561 li
401.508 8.98561 li
401.564 9.85361 401.816 10.5256 402.292 10.9736 cv
402.754 11.4216 403.398 11.6456 404.238 11.6456 cv
404.714 11.6456 405.19 11.5896 405.638 11.4776 cv
406.086 11.3656 406.548 11.1836 406.996 10.9316 cv
406.996 12.1216 li
406.548 12.3176 406.086 12.4716 405.61 12.5556 cv
405.134 12.6396 404.644 12.6956 404.168 12.6956 cv
402.936 12.6956 401.97 12.3456 401.256 11.6456 cv
400.542 10.9456 400.192 9.97961 400.192 8.76161 cv
400.192 7.51561 400.528 6.52161 401.2 5.77961 cv
401.872 5.05161 402.796 4.67361 403.944 4.67361 cv
404.98 4.67361 405.792 5.00961 406.394 5.66761 cv
406.982 6.33961 407.29 7.23561 407.29 8.36961 cv
406.03 8.00561 mo
406.016 7.31961 405.82 6.77361 405.456 6.35361 cv
405.078 5.94761 404.574 5.73761 403.958 5.73761 cv
403.258 5.73761 402.698 5.94761 402.278 6.33961 cv
401.858 6.73161 401.606 7.29161 401.55 8.00561 cv
406.03 8.00561 li
f
414.238 5.07961 mo
414.238 6.26961 li
413.874 6.10161 413.51 5.96161 413.132 5.86361 cv
412.74 5.77961 412.348 5.72361 411.942 5.72361 cv
411.312 5.72361 410.836 5.82161 410.528 6.01761 cv
410.22 6.21361 410.066 6.49361 410.066 6.87161 cv
410.066 7.16561 410.178 7.38961 410.402 7.55761 cv
410.626 7.72561 411.074 7.89361 411.746 8.03361 cv
412.18 8.13161 li
413.076 8.32761 413.706 8.60761 414.084 8.94361 cv
414.448 9.29361 414.644 9.78361 414.644 10.3996 cv
414.644 11.1136 414.364 11.6736 413.804 12.0796 cv
413.244 12.4996 412.46 12.6956 411.48 12.6956 cv
411.06 12.6956 410.64 12.6536 410.192 12.5836 cv
409.744 12.5136 409.282 12.4016 408.792 12.2336 cv
408.792 10.9316 li
409.254 11.1836 409.716 11.3656 410.164 11.4776 cv
410.612 11.6036 411.06 11.6596 411.508 11.6596 cv
412.096 11.6596 412.558 11.5616 412.88 11.3656 cv
413.188 11.1696 413.356 10.8756 413.356 10.4976 cv
413.356 10.1616 413.23 9.89561 413.006 9.71361 cv
412.782 9.53161 412.278 9.34961 411.494 9.18161 cv
411.06 9.08361 li
410.276 8.91561 409.702 8.66361 409.366 8.32761 cv
409.016 7.99161 408.848 7.52961 408.848 6.92761 cv
408.848 6.21361 409.1 5.65361 409.604 5.26161 cv
410.108 4.86961 410.836 4.67361 411.788 4.67361 cv
412.25 4.67361 412.684 4.71561 413.104 4.78561 cv
413.51 4.85561 413.888 4.95361 414.238 5.07961 cv
f
421.096 4.85561 mo
422.356 4.85561 li
422.356 12.5136 li
421.096 12.5136 li
421.096 4.85561 li
421.096 1.87361 mo
422.356 1.87361 li
422.356 3.46961 li
421.096 3.46961 li
421.096 1.87361 li
f
431.355 7.89361 mo
431.355 12.5136 li
430.095 12.5136 li
430.095 7.93561 li
430.095 7.20761 429.941 6.67561 429.661 6.31161 cv
429.381 5.94761 428.961 5.76561 428.401 5.76561 cv
427.715 5.76561 427.183 5.98961 426.791 6.42361 cv
426.399 6.85761 426.203 7.44561 426.203 8.18761 cv
426.203 12.5136 li
424.943 12.5136 li
424.943 4.85561 li
426.203 4.85561 li
426.203 6.04561 li
426.497 5.59761 426.847 5.24761 427.267 5.02361 cv
427.673 4.79961 428.149 4.67361 428.681 4.67361 cv
429.549 4.67361 430.221 4.95361 430.669 5.49961 cv
431.117 6.04561 431.355 6.84361 431.355 7.89361 cv
f
438.729 11.3516 mo
440.983 11.3516 li
440.983 3.56761 li
438.533 4.05761 li
438.533 2.79761 li
440.969 2.30761 li
442.355 2.30761 li
442.355 11.3516 li
444.609 11.3516 li
444.609 12.5136 li
438.729 12.5136 li
438.729 11.3516 li
f
450.352 3.21761 mo
449.638 3.21761 449.106 3.56761 448.742 4.26761 cv
448.378 4.96761 448.21 6.01761 448.21 7.41761 cv
448.21 8.81761 448.378 9.86761 448.742 10.5676 cv
449.106 11.2676 449.638 11.6176 450.352 11.6176 cv
451.066 11.6176 451.598 11.2676 451.962 10.5676 cv
452.312 9.86761 452.494 8.81761 452.494 7.41761 cv
452.494 6.01761 452.312 4.96761 451.962 4.26761 cv
451.598 3.56761 451.066 3.21761 450.352 3.21761 cv
450.352 2.12561 mo
451.486 2.12561 452.354 2.58761 452.97 3.48361 cv
453.572 4.39361 453.88 5.70961 453.88 7.41761 cv
453.88 9.13961 453.572 10.4556 452.97 11.3516 cv
452.354 12.2476 451.486 12.6956 450.352 12.6956 cv
449.204 12.6956 448.322 12.2476 447.72 11.3516 cv
447.118 10.4556 446.824 9.13961 446.824 7.41761 cv
446.824 5.70961 447.118 4.39361 447.72 3.48361 cv
448.322 2.58761 449.204 2.12561 450.352 2.12561 cv
f
455.493 8.11761 mo
459.175 8.11761 li
459.175 9.23761 li
455.493 9.23761 li
455.493 8.11761 li
f
462.421 2.68561 mo
462.421 4.85561 li
465.011 4.85561 li
465.011 5.83561 li
462.421 5.83561 li
462.421 9.99361 li
462.421 10.6236 462.505 11.0296 462.673 11.1976 cv
462.841 11.3796 463.191 11.4636 463.723 11.4636 cv
465.011 11.4636 li
465.011 12.5136 li
463.723 12.5136 li
462.743 12.5136 462.071 12.3316 461.707 11.9676 cv
461.343 11.6036 461.161 10.9456 461.161 9.99361 cv
461.161 5.83561 li
460.237 5.83561 li
460.237 4.85561 li
461.161 4.85561 li
461.161 2.68561 li
462.421 2.68561 li
f
466.664 4.85561 mo
467.924 4.85561 li
467.924 12.5136 li
466.664 12.5136 li
466.664 4.85561 li
466.664 1.87361 mo
467.924 1.87361 li
467.924 3.46961 li
466.664 3.46961 li
466.664 1.87361 li
f
476.518 6.32561 mo
476.826 5.76561 477.204 5.35961 477.638 5.07961 cv
478.072 4.81361 478.59 4.67361 479.192 4.67361 cv
479.976 4.67361 480.592 4.95361 481.026 5.51361 cv
481.46 6.07361 481.684 6.87161 481.684 7.89361 cv
481.684 12.5136 li
480.424 12.5136 li
480.424 7.93561 li
480.424 7.20761 480.284 6.66161 480.032 6.29761 cv
479.766 5.94761 479.374 5.76561 478.842 5.76561 cv
478.184 5.76561 477.666 5.98961 477.288 6.42361 cv
476.91 6.85761 476.728 7.44561 476.728 8.18761 cv
476.728 12.5136 li
475.468 12.5136 li
475.468 7.93561 li
475.468 7.20761 475.328 6.66161 475.076 6.29761 cv
474.81 5.94761 474.404 5.76561 473.872 5.76561 cv
473.228 5.76561 472.71 5.98961 472.332 6.42361 cv
471.954 6.85761 471.772 7.44561 471.772 8.18761 cv
471.772 12.5136 li
470.512 12.5136 li
470.512 4.85561 li
471.772 4.85561 li
471.772 6.04561 li
472.052 5.58361 472.402 5.23361 472.808 5.00961 cv
473.2 4.78561 473.676 4.67361 474.236 4.67361 cv
474.796 4.67361 475.258 4.81361 475.65 5.09361 cv
476.042 5.37361 476.322 5.79361 476.518 6.32561 cv
f
490.743 8.36961 mo
490.743 8.98561 li
484.961 8.98561 li
485.017 9.85361 485.269 10.5256 485.745 10.9736 cv
486.207 11.4216 486.851 11.6456 487.691 11.6456 cv
488.167 11.6456 488.643 11.5896 489.091 11.4776 cv
489.539 11.3656 490.001 11.1836 490.449 10.9316 cv
490.449 12.1216 li
490.001 12.3176 489.539 12.4716 489.063 12.5556 cv
488.587 12.6396 488.097 12.6956 487.621 12.6956 cv
486.389 12.6956 485.423 12.3456 484.709 11.6456 cv
483.995 10.9456 483.645 9.97961 483.645 8.76161 cv
483.645 7.51561 483.981 6.52161 484.653 5.77961 cv
485.325 5.05161 486.249 4.67361 487.397 4.67361 cv
488.433 4.67361 489.245 5.00961 489.847 5.66761 cv
490.435 6.33961 490.743 7.23561 490.743 8.36961 cv
489.483 8.00561 mo
489.469 7.31961 489.273 6.77361 488.909 6.35361 cv
488.531 5.94761 488.027 5.73761 487.411 5.73761 cv
486.711 5.73761 486.151 5.94761 485.731 6.33961 cv
485.311 6.73161 485.059 7.29161 485.003 8.00561 cv
489.483 8.00561 li
f
497.675 11.3516 mo
499.929 11.3516 li
499.929 3.56761 li
497.479 4.05761 li
497.479 2.79761 li
499.915 2.30761 li
501.301 2.30761 li
501.301 11.3516 li
503.555 11.3516 li
503.555 12.5136 li
497.675 12.5136 li
497.675 11.3516 li
f
509.298 3.21761 mo
508.584 3.21761 508.052 3.56761 507.688 4.26761 cv
507.324 4.96761 507.156 6.01761 507.156 7.41761 cv
507.156 8.81761 507.324 9.86761 507.688 10.5676 cv
508.052 11.2676 508.584 11.6176 509.298 11.6176 cv
510.012 11.6176 510.544 11.2676 510.908 10.5676 cv
511.258 9.86761 511.44 8.81761 511.44 7.41761 cv
511.44 6.01761 511.258 4.96761 510.908 4.26761 cv
510.544 3.56761 510.012 3.21761 509.298 3.21761 cv
509.298 2.12561 mo
510.432 2.12561 511.3 2.58761 511.916 3.48361 cv
512.518 4.39361 512.826 5.70961 512.826 7.41761 cv
512.826 9.13961 512.518 10.4556 511.916 11.3516 cv
511.3 12.2476 510.432 12.6956 509.298 12.6956 cv
508.15 12.6956 507.268 12.2476 506.666 11.3516 cv
506.064 10.4556 505.77 9.13961 505.77 7.41761 cv
505.77 5.70961 506.064 4.39361 506.666 3.48361 cv
507.268 2.58761 508.15 2.12561 509.298 2.12561 cv
f
514.439 8.11761 mo
518.121 8.11761 li
518.121 9.23761 li
514.439 9.23761 li
514.439 8.11761 li
f
523.999 1.87361 mo
523.999 2.92361 li
522.795 2.92361 li
522.347 2.92361 522.025 3.02161 521.857 3.20361 cv
521.675 3.38561 521.591 3.70761 521.591 4.18361 cv
521.591 4.85561 li
523.663 4.85561 li
523.663 5.83561 li
521.591 5.83561 li
521.591 12.5136 li
520.331 12.5136 li
520.331 5.83561 li
519.127 5.83561 li
519.127 4.85561 li
520.331 4.85561 li
520.331 4.32361 li
520.331 3.48361 520.527 2.85361 520.919 2.46161 cv
521.311 2.06961 521.941 1.87361 522.809 1.87361 cv
523.999 1.87361 li
f
528.018 5.73761 mo
527.346 5.73761 526.814 6.00361 526.422 6.53561 cv
526.03 7.06761 525.834 7.78161 525.834 8.69161 cv
525.834 9.61561 526.016 10.3296 526.408 10.8616 cv
526.8 11.3936 527.332 11.6456 528.018 11.6456 cv
528.69 11.6456 529.222 11.3936 529.614 10.8616 cv
530.006 10.3296 530.202 9.61561 530.202 8.69161 cv
530.202 7.79561 530.006 7.06761 529.614 6.53561 cv
529.222 6.00361 528.69 5.73761 528.018 5.73761 cv
528.018 4.67361 mo
529.11 4.67361 529.964 5.03761 530.594 5.73761 cv
531.21 6.45161 531.532 7.43161 531.532 8.69161 cv
531.532 9.95161 531.21 10.9316 530.594 11.6316 cv
529.964 12.3456 529.11 12.6956 528.018 12.6956 cv
526.912 12.6956 526.044 12.3456 525.428 11.6316 cv
524.812 10.9316 524.504 9.95161 524.504 8.69161 cv
524.504 7.43161 524.812 6.45161 525.428 5.73761 cv
526.044 5.03761 526.912 4.67361 528.018 4.67361 cv
f
533.615 1.87361 mo
534.875 1.87361 li
534.875 12.5136 li
533.615 12.5136 li
533.615 1.87361 li
f
542.545 6.01761 mo
542.545 1.87361 li
543.805 1.87361 li
543.805 12.5136 li
542.545 12.5136 li
542.545 11.3656 li
542.279 11.8276 541.943 12.1636 541.537 12.3736 cv
541.131 12.5836 540.655 12.6956 540.095 12.6956 cv
539.171 12.6956 538.415 12.3316 537.827 11.6036 cv
537.239 10.8756 536.959 9.89561 536.959 8.69161 cv
536.959 7.48761 537.239 6.52161 537.827 5.77961 cv
538.415 5.05161 539.171 4.67361 540.095 4.67361 cv
540.655 4.67361 541.131 4.78561 541.537 5.00961 cv
541.943 5.23361 542.279 5.56961 542.545 6.01761 cv
538.261 8.69161 mo
538.261 9.61561 538.443 10.3436 538.821 10.8756 cv
539.199 11.4076 539.731 11.6596 540.403 11.6596 cv
541.061 11.6596 541.579 11.4076 541.971 10.8756 cv
542.349 10.3436 542.545 9.61561 542.545 8.69161 cv
542.545 7.76761 542.349 7.05361 541.971 6.52161 cv
541.579 5.98961 541.061 5.72361 540.403 5.72361 cv
539.731 5.72361 539.199 5.98961 538.821 6.52161 cv
538.443 7.05361 538.261 7.76761 538.261 8.69161 cv
f
556.358 5.14961 mo
556.358 6.32561 li
555.994 6.12961 555.644 5.98961 555.28 5.89161 cv
554.916 5.79361 554.566 5.73761 554.202 5.73761 cv
553.39 5.73761 552.746 6.00361 552.298 6.52161 cv
551.85 7.03961 551.626 7.76761 551.626 8.69161 cv
551.626 9.62961 551.85 10.3576 552.298 10.8756 cv
552.746 11.3936 553.39 11.6456 554.202 11.6456 cv
554.566 11.6456 554.916 11.6036 555.28 11.5056 cv
555.644 11.4076 555.994 11.2536 556.358 11.0576 cv
556.358 12.2196 li
555.994 12.3876 555.63 12.5136 555.266 12.5836 cv
554.888 12.6536 554.482 12.6956 554.062 12.6956 cv
552.914 12.6956 551.99 12.3456 551.318 11.6176 cv
550.632 10.9036 550.296 9.92361 550.296 8.69161 cv
550.296 7.44561 550.632 6.46561 551.318 5.75161 cv
552.004 5.03761 552.942 4.67361 554.146 4.67361 cv
554.538 4.67361 554.916 4.71561 555.28 4.79961 cv
555.644 4.88361 556.008 4.99561 556.358 5.14961 cv
f
562.977 6.03161 mo
562.837 5.94761 562.683 5.89161 562.515 5.84961 cv
562.347 5.82161 562.165 5.79361 561.969 5.79361 cv
561.255 5.79361 560.709 6.03161 560.331 6.49361 cv
559.939 6.95561 559.757 7.61361 559.757 8.48161 cv
559.757 12.5136 li
558.497 12.5136 li
558.497 4.85561 li
559.757 4.85561 li
559.757 6.04561 li
560.009 5.58361 560.359 5.23361 560.779 5.00961 cv
561.199 4.78561 561.717 4.67361 562.333 4.67361 cv
562.417 4.67361 562.515 4.68761 562.627 4.68761 cv
562.725 4.70161 562.837 4.71561 562.977 4.74361 cv
562.977 6.03161 li
f
567.263 5.73761 mo
566.591 5.73761 566.059 6.00361 565.667 6.53561 cv
565.275 7.06761 565.079 7.78161 565.079 8.69161 cv
565.079 9.61561 565.261 10.3296 565.653 10.8616 cv
566.045 11.3936 566.577 11.6456 567.263 11.6456 cv
567.935 11.6456 568.467 11.3936 568.859 10.8616 cv
569.251 10.3296 569.447 9.61561 569.447 8.69161 cv
569.447 7.79561 569.251 7.06761 568.859 6.53561 cv
568.467 6.00361 567.935 5.73761 567.263 5.73761 cv
567.263 4.67361 mo
568.355 4.67361 569.209 5.03761 569.839 5.73761 cv
570.455 6.45161 570.777 7.43161 570.777 8.69161 cv
570.777 9.95161 570.455 10.9316 569.839 11.6316 cv
569.209 12.3456 568.355 12.6956 567.263 12.6956 cv
566.157 12.6956 565.289 12.3456 564.673 11.6316 cv
564.057 10.9316 563.749 9.95161 563.749 8.69161 cv
563.749 7.43161 564.057 6.45161 564.673 5.73761 cv
565.289 5.03761 566.157 4.67361 567.263 4.67361 cv
f
577.746 5.07961 mo
577.746 6.26961 li
577.382 6.10161 577.018 5.96161 576.64 5.86361 cv
576.248 5.77961 575.856 5.72361 575.45 5.72361 cv
574.82 5.72361 574.344 5.82161 574.036 6.01761 cv
573.728 6.21361 573.574 6.49361 573.574 6.87161 cv
573.574 7.16561 573.686 7.38961 573.91 7.55761 cv
574.134 7.72561 574.582 7.89361 575.254 8.03361 cv
575.688 8.13161 li
576.584 8.32761 577.214 8.60761 577.592 8.94361 cv
577.956 9.29361 578.152 9.78361 578.152 10.3996 cv
578.152 11.1136 577.872 11.6736 577.312 12.0796 cv
576.752 12.4996 575.968 12.6956 574.988 12.6956 cv
574.568 12.6956 574.148 12.6536 573.7 12.5836 cv
573.252 12.5136 572.79 12.4016 572.3 12.2336 cv
572.3 10.9316 li
572.762 11.1836 573.224 11.3656 573.672 11.4776 cv
574.12 11.6036 574.568 11.6596 575.016 11.6596 cv
575.604 11.6596 576.066 11.5616 576.388 11.3656 cv
576.696 11.1696 576.864 10.8756 576.864 10.4976 cv
576.864 10.1616 576.738 9.89561 576.514 9.71361 cv
576.29 9.53161 575.786 9.34961 575.002 9.18161 cv
574.568 9.08361 li
573.784 8.91561 573.21 8.66361 572.874 8.32761 cv
572.524 7.99161 572.356 7.52961 572.356 6.92761 cv
572.356 6.21361 572.608 5.65361 573.112 5.26161 cv
573.616 4.86961 574.344 4.67361 575.296 4.67361 cv
575.758 4.67361 576.192 4.71561 576.612 4.78561 cv
577.018 4.85561 577.396 4.95361 577.746 5.07961 cv
f
585.04 5.07961 mo
585.04 6.26961 li
584.676 6.10161 584.312 5.96161 583.934 5.86361 cv
583.542 5.77961 583.15 5.72361 582.744 5.72361 cv
582.114 5.72361 581.638 5.82161 581.33 6.01761 cv
581.022 6.21361 580.868 6.49361 580.868 6.87161 cv
580.868 7.16561 580.98 7.38961 581.204 7.55761 cv
581.428 7.72561 581.876 7.89361 582.548 8.03361 cv
582.982 8.13161 li
583.878 8.32761 584.508 8.60761 584.886 8.94361 cv
585.25 9.29361 585.446 9.78361 585.446 10.3996 cv
585.446 11.1136 585.166 11.6736 584.606 12.0796 cv
584.046 12.4996 583.262 12.6956 582.282 12.6956 cv
581.862 12.6956 581.442 12.6536 580.994 12.5836 cv
580.546 12.5136 580.084 12.4016 579.594 12.2336 cv
579.594 10.9316 li
580.056 11.1836 580.518 11.3656 580.966 11.4776 cv
581.414 11.6036 581.862 11.6596 582.31 11.6596 cv
582.898 11.6596 583.36 11.5616 583.682 11.3656 cv
583.99 11.1696 584.158 10.8756 584.158 10.4976 cv
584.158 10.1616 584.032 9.89561 583.808 9.71361 cv
583.584 9.53161 583.08 9.34961 582.296 9.18161 cv
581.862 9.08361 li
581.078 8.91561 580.504 8.66361 580.168 8.32761 cv
579.818 7.99161 579.65 7.52961 579.65 6.92761 cv
579.65 6.21361 579.902 5.65361 580.406 5.26161 cv
580.91 4.86961 581.638 4.67361 582.59 4.67361 cv
583.052 4.67361 583.486 4.71561 583.906 4.78561 cv
584.312 4.85561 584.69 4.95361 585.04 5.07961 cv
f
591.002 4.85561 mo
592.332 4.85561 li
594.726 11.2816 li
597.12 4.85561 li
598.45 4.85561 li
595.58 12.5136 li
593.872 12.5136 li
591.002 4.85561 li
f
603.67 8.66361 mo
602.648 8.66361 601.948 8.78961 601.556 9.01361 cv
601.164 9.25161 600.968 9.64361 600.968 10.2036 cv
600.968 10.6516 601.108 11.0156 601.402 11.2676 cv
601.696 11.5336 602.102 11.6596 602.606 11.6596 cv
603.306 11.6596 603.866 11.4216 604.286 10.9176 cv
604.706 10.4276 604.916 9.76961 604.916 8.94361 cv
604.916 8.66361 li
603.67 8.66361 li
606.176 8.14561 mo
606.176 12.5136 li
604.916 12.5136 li
604.916 11.3516 li
604.622 11.8276 604.258 12.1636 603.838 12.3736 cv
603.418 12.5836 602.886 12.6956 602.27 12.6956 cv
601.486 12.6956 600.856 12.4856 600.394 12.0516 cv
599.932 11.6176 599.708 11.0296 599.708 10.2876 cv
599.708 9.43361 599.988 8.78961 600.576 8.34161 cv
601.15 7.90761 602.004 7.68361 603.152 7.68361 cv
604.916 7.68361 li
604.916 7.55761 li
604.916 6.98361 604.72 6.53561 604.342 6.21361 cv
603.964 5.90561 603.432 5.73761 602.746 5.73761 cv
602.298 5.73761 601.878 5.79361 601.458 5.90561 cv
601.038 6.01761 600.646 6.17161 600.268 6.36761 cv
600.268 5.20561 li
600.716 5.03761 601.164 4.89761 601.598 4.81361 cv
602.032 4.72961 602.452 4.67361 602.872 4.67361 cv
603.978 4.67361 604.804 4.96761 605.35 5.54161 cv
605.896 6.11561 606.176 6.98361 606.176 8.14561 cv
f
608.763 1.87361 mo
610.023 1.87361 li
610.023 12.5136 li
608.763 12.5136 li
608.763 1.87361 li
f
612.652 4.85561 mo
613.912 4.85561 li
613.912 12.5136 li
612.652 12.5136 li
612.652 4.85561 li
612.652 1.87361 mo
613.912 1.87361 li
613.912 3.46961 li
612.652 3.46961 li
612.652 1.87361 li
f
621.582 6.01761 mo
621.582 1.87361 li
622.842 1.87361 li
622.842 12.5136 li
621.582 12.5136 li
621.582 11.3656 li
621.316 11.8276 620.98 12.1636 620.574 12.3736 cv
620.168 12.5836 619.692 12.6956 619.132 12.6956 cv
618.208 12.6956 617.452 12.3316 616.864 11.6036 cv
616.276 10.8756 615.996 9.89561 615.996 8.69161 cv
615.996 7.48761 616.276 6.52161 616.864 5.77961 cv
617.452 5.05161 618.208 4.67361 619.132 4.67361 cv
619.692 4.67361 620.168 4.78561 620.574 5.00961 cv
620.98 5.23361 621.316 5.56961 621.582 6.01761 cv
617.298 8.69161 mo
617.298 9.61561 617.48 10.3436 617.858 10.8756 cv
618.236 11.4076 618.768 11.6596 619.44 11.6596 cv
620.098 11.6596 620.616 11.4076 621.008 10.8756 cv
621.386 10.3436 621.582 9.61561 621.582 8.69161 cv
621.582 7.76761 621.386 7.05361 621.008 6.52161 cv
620.616 5.98961 620.098 5.72361 619.44 5.72361 cv
618.768 5.72361 618.236 5.98961 617.858 6.52161 cv
617.48 7.05361 617.298 7.76761 617.298 8.69161 cv
f
628.915 8.66361 mo
627.893 8.66361 627.193 8.78961 626.801 9.01361 cv
626.409 9.25161 626.213 9.64361 626.213 10.2036 cv
626.213 10.6516 626.353 11.0156 626.647 11.2676 cv
626.941 11.5336 627.347 11.6596 627.851 11.6596 cv
628.551 11.6596 629.111 11.4216 629.531 10.9176 cv
629.951 10.4276 630.161 9.76961 630.161 8.94361 cv
630.161 8.66361 li
628.915 8.66361 li
631.421 8.14561 mo
631.421 12.5136 li
630.161 12.5136 li
630.161 11.3516 li
629.867 11.8276 629.503 12.1636 629.083 12.3736 cv
628.663 12.5836 628.131 12.6956 627.515 12.6956 cv
626.731 12.6956 626.101 12.4856 625.639 12.0516 cv
625.177 11.6176 624.953 11.0296 624.953 10.2876 cv
624.953 9.43361 625.233 8.78961 625.821 8.34161 cv
626.395 7.90761 627.249 7.68361 628.397 7.68361 cv
630.161 7.68361 li
630.161 7.55761 li
630.161 6.98361 629.965 6.53561 629.587 6.21361 cv
629.209 5.90561 628.677 5.73761 627.991 5.73761 cv
627.543 5.73761 627.123 5.79361 626.703 5.90561 cv
626.283 6.01761 625.891 6.17161 625.513 6.36761 cv
625.513 5.20561 li
625.961 5.03761 626.409 4.89761 626.843 4.81361 cv
627.277 4.72961 627.697 4.67361 628.117 4.67361 cv
629.223 4.67361 630.049 4.96761 630.595 5.54161 cv
631.141 6.11561 631.421 6.98361 631.421 8.14561 cv
f
635.254 2.68561 mo
635.254 4.85561 li
637.844 4.85561 li
637.844 5.83561 li
635.254 5.83561 li
635.254 9.99361 li
635.254 10.6236 635.338 11.0296 635.506 11.1976 cv
635.674 11.3796 636.024 11.4636 636.556 11.4636 cv
637.844 11.4636 li
637.844 12.5136 li
636.556 12.5136 li
635.576 12.5136 634.904 12.3316 634.54 11.9676 cv
634.176 11.6036 633.994 10.9456 633.994 9.99361 cv
633.994 5.83561 li
633.07 5.83561 li
633.07 4.85561 li
633.994 4.85561 li
633.994 2.68561 li
635.254 2.68561 li
f
639.497 4.85561 mo
640.757 4.85561 li
640.757 12.5136 li
639.497 12.5136 li
639.497 4.85561 li
639.497 1.87361 mo
640.757 1.87361 li
640.757 3.46961 li
639.497 3.46961 li
639.497 1.87361 li
f
646.355 5.73761 mo
645.683 5.73761 645.151 6.00361 644.759 6.53561 cv
644.367 7.06761 644.171 7.78161 644.171 8.69161 cv
644.171 9.61561 644.353 10.3296 644.745 10.8616 cv
645.137 11.3936 645.669 11.6456 646.355 11.6456 cv
647.027 11.6456 647.559 11.3936 647.951 10.8616 cv
648.343 10.3296 648.539 9.61561 648.539 8.69161 cv
648.539 7.79561 648.343 7.06761 647.951 6.53561 cv
647.559 6.00361 647.027 5.73761 646.355 5.73761 cv
646.355 4.67361 mo
647.447 4.67361 648.301 5.03761 648.931 5.73761 cv
649.547 6.45161 649.869 7.43161 649.869 8.69161 cv
649.869 9.95161 649.547 10.9316 648.931 11.6316 cv
648.301 12.3456 647.447 12.6956 646.355 12.6956 cv
645.249 12.6956 644.381 12.3456 643.765 11.6316 cv
643.149 10.9316 642.841 9.95161 642.841 8.69161 cv
642.841 7.43161 643.149 6.45161 643.765 5.73761 cv
644.381 5.03761 645.249 4.67361 646.355 4.67361 cv
f
658.322 7.89361 mo
658.322 12.5136 li
657.062 12.5136 li
657.062 7.93561 li
657.062 7.20761 656.908 6.67561 656.628 6.31161 cv
656.348 5.94761 655.928 5.76561 655.368 5.76561 cv
654.682 5.76561 654.15 5.98961 653.758 6.42361 cv
653.366 6.85761 653.17 7.44561 653.17 8.18761 cv
653.17 12.5136 li
651.91 12.5136 li
651.91 4.85561 li
653.17 4.85561 li
653.17 6.04561 li
653.464 5.59761 653.814 5.24761 654.234 5.02361 cv
654.64 4.79961 655.116 4.67361 655.648 4.67361 cv
656.516 4.67361 657.188 4.95361 657.636 5.49961 cv
658.084 6.04561 658.322 6.84361 658.322 7.89361 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
